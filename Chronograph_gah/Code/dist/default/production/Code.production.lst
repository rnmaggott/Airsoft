

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Tue Aug 12 22:29:24 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     	;# 
    22  0001                     	;# 
    23  0002                     	;# 
    24  0003                     	;# 
    25  0004                     	;# 
    26  0005                     	;# 
    27  0006                     	;# 
    28  000A                     	;# 
    29  000B                     	;# 
    30  000C                     	;# 
    31  000D                     	;# 
    32  000E                     	;# 
    33  000E                     	;# 
    34  000F                     	;# 
    35  0010                     	;# 
    36  0011                     	;# 
    37  0012                     	;# 
    38  0013                     	;# 
    39  0014                     	;# 
    40  0015                     	;# 
    41  0015                     	;# 
    42  0016                     	;# 
    43  0017                     	;# 
    44  0018                     	;# 
    45  0019                     	;# 
    46  001A                     	;# 
    47  001E                     	;# 
    48  001F                     	;# 
    49  0081                     	;# 
    50  0085                     	;# 
    51  0086                     	;# 
    52  008C                     	;# 
    53  008D                     	;# 
    54  008E                     	;# 
    55  008F                     	;# 
    56  0090                     	;# 
    57  0092                     	;# 
    58  0093                     	;# 
    59  0094                     	;# 
    60  0098                     	;# 
    61  0099                     	;# 
    62  009B                     	;# 
    63  009C                     	;# 
    64  009D                     	;# 
    65  009E                     	;# 
    66  009F                     	;# 
    67  0105                     	;# 
    68  010C                     	;# 
    69  010D                     	;# 
    70  010E                     	;# 
    71  010F                     	;# 
    72  018C                     	;# 
    73  018D                     	;# 
    74  000B                     _INTCONbits	set	11
    75  000C                     _PIR1bits	set	12
    76  0006                     _PORTB	set	6
    77  0006                     _PORTBbits	set	6
    78  0010                     _T1CONbits	set	16
    79  005F                     _GIE	set	95
    80  005D                     _TMR0IE	set	93
    81  005A                     _TMR0IF	set	90
    82  0060                     _TMR1IF	set	96
    83  009B                     _ANSEL	set	155
    84  009C                     _CMCON	set	156
    85  0081                     _OPTION_REG	set	129
    86  0081                     _OPTION_REGbits	set	129
    87  008F                     _OSCCON	set	143
    88  008C                     _PIE1bits	set	140
    89  0086                     _TRISB	set	134
    90  0460                     _TMR1IE	set	1120
    91                           
    92                           	psect	text0
    93  0000                     __ptext0:	
    94                           
    95                           ;psect for function _isr
    96                           ; #config settings
    97  0000                     
    98                           	psect	cinit
    99  018B                     start_initialization:	
   100  018B                     __initialization:	
   101                           
   102                           ; Clear objects allocated to COMMON
   103  018B  01F8               	clrf	__pbssCOMMON& (0+127)
   104  018C  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   105  018D                     end_of_initialization:	
   106                           ;End of C runtime variable initialization code
   107                           
   108  018D                     __end_of__initialization:	
   109  018D  0183               	clrf	3
   110  018E  118A  28E1         	ljmp	_main	;jump to C main() function
   111                           
   112                           	psect	bssCOMMON
   113  0078                     __pbssCOMMON:	
   114  0078                     _tflag:	
   115  0078                     	ds	2
   116                           
   117                           	psect	cstackCOMMON
   118  0070                     __pcstackCOMMON:	
   119  0070                     ?_startUp:	
   120  0070                     ?_initializeInt:	
   121                           ; 0 bytes @ 0x0
   122                           
   123  0070                     ?_initializeTimer0:	
   124                           ; 0 bytes @ 0x0
   125                           
   126  0070                     ?_initializeTimer1:	
   127                           ; 0 bytes @ 0x0
   128                           
   129  0070                     ?_fLCD_Start:	
   130                           ; 0 bytes @ 0x0
   131                           
   132  0070                     ?_fLCD_PrintASCII:	
   133                           ; 0 bytes @ 0x0
   134                           
   135  0070                     ?_fLCD_Clear:	
   136                           ; 0 bytes @ 0x0
   137                           
   138  0070                     ?_main:	
   139                           ; 0 bytes @ 0x0
   140                           
   141  0070                     ?_isr:	
   142                           ; 0 bytes @ 0x0
   143                           
   144  0070                     ??_isr:	
   145                           ; 0 bytes @ 0x0
   146                           
   147                           
   148                           ; 0 bytes @ 0x0
   149  0070                     	ds	4
   150  0074                     ??_startUp:	
   151  0074                     ??_initializeInt:	
   152                           ; 0 bytes @ 0x4
   153                           
   154  0074                     ??_initializeTimer0:	
   155                           ; 0 bytes @ 0x4
   156                           
   157  0074                     ??_initializeTimer1:	
   158                           ; 0 bytes @ 0x4
   159                           
   160  0074                     ?_fLCD_RawSend:	
   161                           ; 0 bytes @ 0x4
   162                           
   163  0074                     fLCD_RawSend@mask:	
   164                           ; 0 bytes @ 0x4
   165                           
   166                           
   167                           ; 1 bytes @ 0x4
   168  0074                     	ds	1
   169  0075                     ??_fLCD_RawSend:	
   170                           
   171                           ; 0 bytes @ 0x5
   172  0075                     	ds	2
   173  0077                     ??_fLCD_PrintASCII:	
   174                           
   175                           ; 0 bytes @ 0x7
   176  0077                     	ds	1
   177                           
   178                           	psect	cstackBANK0
   179  0020                     __pcstackBANK0:	
   180  0020                     fLCD_RawSend@in:	
   181                           
   182                           ; 1 bytes @ 0x0
   183  0020                     	ds	1
   184  0021                     fLCD_RawSend@pt:	
   185                           
   186                           ; 1 bytes @ 0x1
   187  0021                     	ds	1
   188  0022                     ??_fLCD_Clear:	
   189  0022                     fLCD_PrintASCII@Character:	
   190                           ; 0 bytes @ 0x2
   191                           
   192                           
   193                           ; 1 bytes @ 0x2
   194  0022                     	ds	2
   195  0024                     ??_fLCD_Start:	
   196                           
   197                           ; 0 bytes @ 0x4
   198  0024                     	ds	2
   199  0026                     ??_main:	
   200                           
   201                           ; 0 bytes @ 0x6
   202  0026                     	ds	3
   203                           
   204                           	psect	maintext
   205  00E1                     __pmaintext:	
   206 ;;
   207 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   208 ;;
   209 ;; *************** function _main *****************
   210 ;; Defined at:
   211 ;;		line 59 in file "chrono.c"
   212 ;; Parameters:    Size  Location     Type
   213 ;;		None
   214 ;; Auto vars:     Size  Location     Type
   215 ;;		None
   216 ;; Return value:  Size  Location     Type
   217 ;;		None               void
   218 ;; Registers used:
   219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   220 ;; Tracked objects:
   221 ;;		On entry : 17F/0
   222 ;;		On exit  : 0/0
   223 ;;		Unchanged: 0/0
   224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   225 ;;      Params:         0       0       0       0       0
   226 ;;      Locals:         0       0       0       0       0
   227 ;;      Temps:          0       3       0       0       0
   228 ;;      Totals:         0       3       0       0       0
   229 ;;Total ram usage:        3 bytes
   230 ;; Hardware stack levels required when called:    4
   231 ;; This function calls:
   232 ;;		_startUp
   233 ;;		_initializeInt
   234 ;;		_initializeTimer0
   235 ;;		_initializeTimer1
   236 ;;		_fLCD_Start
   237 ;;		_fLCD_PrintASCII
   238 ;; This function is called by:
   239 ;;		Startup code after reset
   240 ;; This function uses a non-reentrant model
   241 ;;
   242                           
   243                           
   244                           ;psect for function _main
   245  00E1                     _main:	
   246                           
   247                           ;chrono.c: 61: startUp();
   248                           
   249                           ;incstack = 0
   250                           ; Regs used in _main: [allreg]
   251  00E1  118A  213C  118A   	fcall	_startUp
   252                           
   253                           ;chrono.c: 62: initializeInt();
   254  00E4  118A  2162  118A   	fcall	_initializeInt
   255                           
   256                           ;chrono.c: 63: initializeTimer0();
   257  00E7  118A  217A  118A   	fcall	_initializeTimer0
   258                           
   259                           ;chrono.c: 64: initializeTimer1();
   260  00EA  118A  2183  118A   	fcall	_initializeTimer1
   261                           
   262                           ;chrono.c: 65: _delay((unsigned long)((120)*(8000000/4000.0)));
   263  00ED  3002               	movlw	2
   264  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   265  00EF  1303               	bcf	3,6	;RP1=0, select bank0
   266  00F0  00A8               	movwf	??_main+2
   267  00F1  3038               	movlw	56
   268  00F2  00A7               	movwf	??_main+1
   269  00F3  30AD               	movlw	173
   270  00F4  00A6               	movwf	??_main
   271  00F5                     u817:	
   272  00F5  0BA6               	decfsz	??_main,f
   273  00F6  28F5               	goto	u817
   274  00F7  0BA7               	decfsz	??_main+1,f
   275  00F8  28F5               	goto	u817
   276  00F9  0BA8               	decfsz	??_main+2,f
   277  00FA  28F5               	goto	u817
   278                           
   279                           ;chrono.c: 66: fLCD_Start();
   280  00FB  118A  2013  118A   	fcall	_fLCD_Start
   281                           
   282                           ;chrono.c: 68: fLCD_PrintASCII('G');
   283  00FE  3047               	movlw	71
   284  00FF  118A  216F  118A   	fcall	_fLCD_PrintASCII
   285                           
   286                           ;chrono.c: 69: fLCD_PrintASCII('H');
   287  0102  3048               	movlw	72
   288  0103  118A  216F  118A   	fcall	_fLCD_PrintASCII
   289                           
   290                           ;chrono.c: 70: fLCD_PrintASCII('I');
   291  0106  3049               	movlw	73
   292  0107  118A  216F  118A   	fcall	_fLCD_PrintASCII
   293                           
   294                           ;chrono.c: 71: fLCD_PrintASCII('J');
   295  010A  304A               	movlw	74
   296  010B  118A  216F  118A   	fcall	_fLCD_PrintASCII
   297                           
   298                           ;chrono.c: 72: fLCD_PrintASCII('K');
   299  010E  304B               	movlw	75
   300  010F  118A  216F  118A   	fcall	_fLCD_PrintASCII
   301                           
   302                           ;chrono.c: 73: fLCD_PrintASCII('L');
   303  0112  304C               	movlw	76
   304  0113  118A  216F  118A   	fcall	_fLCD_PrintASCII
   305                           
   306                           ;chrono.c: 74: fLCD_PrintASCII('M');
   307  0116  304D               	movlw	77
   308  0117  118A  216F  118A   	fcall	_fLCD_PrintASCII
   309  011A                     l57:	
   310                           ;chrono.c: 76: for(;;){
   311                           
   312                           
   313                           ;chrono.c: 77: }
   314  011A  291A               	goto	l57
   315  011B                     __end_of_main:	
   316                           
   317                           	psect	text1
   318  016F                     __ptext1:	
   319 ;; *************** function _fLCD_PrintASCII *****************
   320 ;; Defined at:
   321 ;;		line 152 in file "chrono.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;  Character       1    wreg     unsigned char 
   324 ;; Auto vars:     Size  Location     Type
   325 ;;  Character       1    2[BANK0 ] unsigned char 
   326 ;; Return value:  Size  Location     Type
   327 ;;		None               void
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0, pclath, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   335 ;;      Params:         0       0       0       0       0
   336 ;;      Locals:         0       1       0       0       0
   337 ;;      Temps:          1       0       0       0       0
   338 ;;      Totals:         1       1       0       0       0
   339 ;;Total ram usage:        2 bytes
   340 ;; Hardware stack levels used:    1
   341 ;; Hardware stack levels required when called:    2
   342 ;; This function calls:
   343 ;;		_fLCD_RawSend
   344 ;; This function is called by:
   345 ;;		_main
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           
   350                           ;psect for function _fLCD_PrintASCII
   351  016F                     _fLCD_PrintASCII:	
   352                           
   353                           ;incstack = 0
   354                           ; Regs used in _fLCD_PrintASCII: [wreg+status,2+status,0+pclath+cstack]
   355                           ;fLCD_PrintASCII@Character stored from wreg
   356  016F  1283               	bcf	3,5	;RP0=0, select bank0
   357  0170  1303               	bcf	3,6	;RP1=0, select bank0
   358  0171  00A2               	movwf	fLCD_PrintASCII@Character
   359                           
   360                           ;chrono.c: 153: fLCD_RawSend(Character, 0x10);
   361  0172  3010               	movlw	16
   362  0173  00F7               	movwf	??_fLCD_PrintASCII
   363  0174  0877               	movf	??_fLCD_PrintASCII,w
   364  0175  00F4               	movwf	?_fLCD_RawSend
   365  0176  0822               	movf	fLCD_PrintASCII@Character,w
   366  0177  118A  2082         	fcall	_fLCD_RawSend
   367  0179  0008               	return
   368  017A                     __end_of_fLCD_PrintASCII:	
   369                           
   370                           	psect	text2
   371  0013                     __ptext2:	
   372 ;; *************** function _fLCD_Start *****************
   373 ;; Defined at:
   374 ;;		line 82 in file "chrono.c"
   375 ;; Parameters:    Size  Location     Type
   376 ;;		None
   377 ;; Auto vars:     Size  Location     Type
   378 ;;		None
   379 ;; Return value:  Size  Location     Type
   380 ;;		None               void
   381 ;; Registers used:
   382 ;;		wreg, status,2, status,0, pclath, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : 0/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   388 ;;      Params:         0       0       0       0       0
   389 ;;      Locals:         0       0       0       0       0
   390 ;;      Temps:          0       2       0       0       0
   391 ;;      Totals:         0       2       0       0       0
   392 ;;Total ram usage:        2 bytes
   393 ;; Hardware stack levels used:    1
   394 ;; Hardware stack levels required when called:    3
   395 ;; This function calls:
   396 ;;		_fLCD_RawSend
   397 ;;		_fLCD_Clear
   398 ;; This function is called by:
   399 ;;		_main
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           
   404                           ;psect for function _fLCD_Start
   405  0013                     _fLCD_Start:	
   406                           
   407                           ;chrono.c: 83: PORTB = 0;
   408                           
   409                           ;incstack = 0
   410                           ; Regs used in _fLCD_Start: [wreg+status,2+status,0+pclath+cstack]
   411  0013  1283               	bcf	3,5	;RP0=0, select bank0
   412  0014  1303               	bcf	3,6	;RP1=0, select bank0
   413  0015  0186               	clrf	6	;volatile
   414                           
   415                           ;chrono.c: 84: _delay((unsigned long)((12)*(8000000/4000.0)));
   416  0016  3020               	movlw	32
   417  0017  00A5               	movwf	??_fLCD_Start+1
   418  0018  3029               	movlw	41
   419  0019  00A4               	movwf	??_fLCD_Start
   420  001A                     u827:	
   421  001A  0BA4               	decfsz	??_fLCD_Start,f
   422  001B  281A               	goto	u827
   423  001C  0BA5               	decfsz	??_fLCD_Start+1,f
   424  001D  281A               	goto	u827
   425  001E  281F               	nop2
   426                           
   427                           ;chrono.c: 85: fLCD_RawSend(0x33, 0);
   428  001F  01F4               	clrf	?_fLCD_RawSend
   429  0020  3033               	movlw	51
   430  0021  118A  2082  118A   	fcall	_fLCD_RawSend
   431                           
   432                           ;chrono.c: 86: _delay((unsigned long)((2)*(8000000/4000.0)));
   433  0024  3006               	movlw	6
   434  0025  1283               	bcf	3,5	;RP0=0, select bank0
   435  0026  1303               	bcf	3,6	;RP1=0, select bank0
   436  0027  00A5               	movwf	??_fLCD_Start+1
   437  0028  3030               	movlw	48
   438  0029  00A4               	movwf	??_fLCD_Start
   439  002A                     u837:	
   440  002A  0BA4               	decfsz	??_fLCD_Start,f
   441  002B  282A               	goto	u837
   442  002C  0BA5               	decfsz	??_fLCD_Start+1,f
   443  002D  282A               	goto	u837
   444  002E  0000               	nop
   445                           
   446                           ;chrono.c: 87: fLCD_RawSend(0x33, 0);
   447  002F  01F4               	clrf	?_fLCD_RawSend
   448  0030  3033               	movlw	51
   449  0031  118A  2082  118A   	fcall	_fLCD_RawSend
   450                           
   451                           ;chrono.c: 88: _delay((unsigned long)((2)*(8000000/4000.0)));
   452  0034  3006               	movlw	6
   453  0035  1283               	bcf	3,5	;RP0=0, select bank0
   454  0036  1303               	bcf	3,6	;RP1=0, select bank0
   455  0037  00A5               	movwf	??_fLCD_Start+1
   456  0038  3030               	movlw	48
   457  0039  00A4               	movwf	??_fLCD_Start
   458  003A                     u847:	
   459  003A  0BA4               	decfsz	??_fLCD_Start,f
   460  003B  283A               	goto	u847
   461  003C  0BA5               	decfsz	??_fLCD_Start+1,f
   462  003D  283A               	goto	u847
   463  003E  0000               	nop
   464                           
   465                           ;chrono.c: 89: fLCD_RawSend(0x32, 0);
   466  003F  01F4               	clrf	?_fLCD_RawSend
   467  0040  3032               	movlw	50
   468  0041  118A  2082  118A   	fcall	_fLCD_RawSend
   469                           
   470                           ;chrono.c: 90: _delay((unsigned long)((2)*(8000000/4000.0)));
   471  0044  3006               	movlw	6
   472  0045  1283               	bcf	3,5	;RP0=0, select bank0
   473  0046  1303               	bcf	3,6	;RP1=0, select bank0
   474  0047  00A5               	movwf	??_fLCD_Start+1
   475  0048  3030               	movlw	48
   476  0049  00A4               	movwf	??_fLCD_Start
   477  004A                     u857:	
   478  004A  0BA4               	decfsz	??_fLCD_Start,f
   479  004B  284A               	goto	u857
   480  004C  0BA5               	decfsz	??_fLCD_Start+1,f
   481  004D  284A               	goto	u857
   482  004E  0000               	nop
   483                           
   484                           ;chrono.c: 91: fLCD_RawSend(0x2c, 0);
   485  004F  01F4               	clrf	?_fLCD_RawSend
   486  0050  302C               	movlw	44
   487  0051  118A  2082  118A   	fcall	_fLCD_RawSend
   488                           
   489                           ;chrono.c: 92: _delay((unsigned long)((2)*(8000000/4000.0)));
   490  0054  3006               	movlw	6
   491  0055  1283               	bcf	3,5	;RP0=0, select bank0
   492  0056  1303               	bcf	3,6	;RP1=0, select bank0
   493  0057  00A5               	movwf	??_fLCD_Start+1
   494  0058  3030               	movlw	48
   495  0059  00A4               	movwf	??_fLCD_Start
   496  005A                     u867:	
   497  005A  0BA4               	decfsz	??_fLCD_Start,f
   498  005B  285A               	goto	u867
   499  005C  0BA5               	decfsz	??_fLCD_Start+1,f
   500  005D  285A               	goto	u867
   501  005E  0000               	nop
   502                           
   503                           ;chrono.c: 93: fLCD_RawSend(0x06, 0);
   504  005F  01F4               	clrf	?_fLCD_RawSend
   505  0060  3006               	movlw	6
   506  0061  118A  2082  118A   	fcall	_fLCD_RawSend
   507                           
   508                           ;chrono.c: 94: _delay((unsigned long)((2)*(8000000/4000.0)));
   509  0064  3006               	movlw	6
   510  0065  1283               	bcf	3,5	;RP0=0, select bank0
   511  0066  1303               	bcf	3,6	;RP1=0, select bank0
   512  0067  00A5               	movwf	??_fLCD_Start+1
   513  0068  3030               	movlw	48
   514  0069  00A4               	movwf	??_fLCD_Start
   515  006A                     u877:	
   516  006A  0BA4               	decfsz	??_fLCD_Start,f
   517  006B  286A               	goto	u877
   518  006C  0BA5               	decfsz	??_fLCD_Start+1,f
   519  006D  286A               	goto	u877
   520  006E  0000               	nop
   521                           
   522                           ;chrono.c: 95: fLCD_RawSend(0x0c, 0);
   523  006F  01F4               	clrf	?_fLCD_RawSend
   524  0070  300C               	movlw	12
   525  0071  118A  2082  118A   	fcall	_fLCD_RawSend
   526                           
   527                           ;chrono.c: 96: _delay((unsigned long)((2)*(8000000/4000.0)));
   528  0074  3006               	movlw	6
   529  0075  1283               	bcf	3,5	;RP0=0, select bank0
   530  0076  1303               	bcf	3,6	;RP1=0, select bank0
   531  0077  00A5               	movwf	??_fLCD_Start+1
   532  0078  3030               	movlw	48
   533  0079  00A4               	movwf	??_fLCD_Start
   534  007A                     u887:	
   535  007A  0BA4               	decfsz	??_fLCD_Start,f
   536  007B  287A               	goto	u887
   537  007C  0BA5               	decfsz	??_fLCD_Start+1,f
   538  007D  287A               	goto	u887
   539  007E  0000               	nop
   540                           
   541                           ;chrono.c: 98: fLCD_Clear();
   542  007F  118A  211B         	fcall	_fLCD_Clear
   543  0081  0008               	return
   544  0082                     __end_of_fLCD_Start:	
   545                           
   546                           	psect	text3
   547  011B                     __ptext3:	
   548 ;; *************** function _fLCD_Clear *****************
   549 ;; Defined at:
   550 ;;		line 144 in file "chrono.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;		None
   553 ;; Auto vars:     Size  Location     Type
   554 ;;		None
   555 ;; Return value:  Size  Location     Type
   556 ;;		None               void
   557 ;; Registers used:
   558 ;;		wreg, status,2, status,0, pclath, cstack
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   564 ;;      Params:         0       0       0       0       0
   565 ;;      Locals:         0       0       0       0       0
   566 ;;      Temps:          0       2       0       0       0
   567 ;;      Totals:         0       2       0       0       0
   568 ;;Total ram usage:        2 bytes
   569 ;; Hardware stack levels used:    1
   570 ;; Hardware stack levels required when called:    2
   571 ;; This function calls:
   572 ;;		_fLCD_RawSend
   573 ;; This function is called by:
   574 ;;		_fLCD_Start
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578                           
   579                           ;psect for function _fLCD_Clear
   580  011B                     _fLCD_Clear:	
   581                           
   582                           ;chrono.c: 146: fLCD_RawSend(0x01, 0);
   583                           
   584                           ;incstack = 0
   585                           ; Regs used in _fLCD_Clear: [wreg+status,2+status,0+pclath+cstack]
   586  011B  01F4               	clrf	?_fLCD_RawSend
   587  011C  3001               	movlw	1
   588  011D  118A  2082  118A   	fcall	_fLCD_RawSend
   589                           
   590                           ;chrono.c: 147: _delay((unsigned long)((2)*(8000000/4000.0)));
   591  0120  3006               	movlw	6
   592  0121  1283               	bcf	3,5	;RP0=0, select bank0
   593  0122  1303               	bcf	3,6	;RP1=0, select bank0
   594  0123  00A3               	movwf	??_fLCD_Clear+1
   595  0124  3030               	movlw	48
   596  0125  00A2               	movwf	??_fLCD_Clear
   597  0126                     u897:	
   598  0126  0BA2               	decfsz	??_fLCD_Clear,f
   599  0127  2926               	goto	u897
   600  0128  0BA3               	decfsz	??_fLCD_Clear+1,f
   601  0129  2926               	goto	u897
   602  012A  0000               	nop
   603                           
   604                           ;chrono.c: 148: fLCD_RawSend(0x02, 0);
   605  012B  01F4               	clrf	?_fLCD_RawSend
   606  012C  3002               	movlw	2
   607  012D  118A  2082  118A   	fcall	_fLCD_RawSend
   608                           
   609                           ;chrono.c: 149: _delay((unsigned long)((2)*(8000000/4000.0)));
   610  0130  3006               	movlw	6
   611  0131  1283               	bcf	3,5	;RP0=0, select bank0
   612  0132  1303               	bcf	3,6	;RP1=0, select bank0
   613  0133  00A3               	movwf	??_fLCD_Clear+1
   614  0134  3030               	movlw	48
   615  0135  00A2               	movwf	??_fLCD_Clear
   616  0136                     u907:	
   617  0136  0BA2               	decfsz	??_fLCD_Clear,f
   618  0137  2936               	goto	u907
   619  0138  0BA3               	decfsz	??_fLCD_Clear+1,f
   620  0139  2936               	goto	u907
   621  013A  0000               	nop
   622  013B  0008               	return
   623  013C                     __end_of_fLCD_Clear:	
   624                           
   625                           	psect	text4
   626  0082                     __ptext4:	
   627 ;; *************** function _fLCD_RawSend *****************
   628 ;; Defined at:
   629 ;;		line 101 in file "chrono.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  in              1    wreg     unsigned char 
   632 ;;  mask            1    4[COMMON] unsigned char 
   633 ;; Auto vars:     Size  Location     Type
   634 ;;  in              1    0[BANK0 ] unsigned char 
   635 ;;  pt              1    1[BANK0 ] unsigned char 
   636 ;; Return value:  Size  Location     Type
   637 ;;		None               void
   638 ;; Registers used:
   639 ;;		wreg, status,2, status,0
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   645 ;;      Params:         1       0       0       0       0
   646 ;;      Locals:         0       2       0       0       0
   647 ;;      Temps:          2       0       0       0       0
   648 ;;      Totals:         3       2       0       0       0
   649 ;;Total ram usage:        5 bytes
   650 ;; Hardware stack levels used:    1
   651 ;; Hardware stack levels required when called:    1
   652 ;; This function calls:
   653 ;;		Nothing
   654 ;; This function is called by:
   655 ;;		_fLCD_Start
   656 ;;		_fLCD_Clear
   657 ;;		_fLCD_PrintASCII
   658 ;;		_fLCD_Command
   659 ;;		_fLCD_Cursor
   660 ;;		_fLCD_PrintNumber
   661 ;;		_fLCD_PrintString
   662 ;;		_fLCD_ClearLine
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           
   667                           ;psect for function _fLCD_RawSend
   668  0082                     _fLCD_RawSend:	
   669                           
   670                           ;incstack = 0
   671                           ; Regs used in _fLCD_RawSend: [wreg+status,2+status,0]
   672                           ;fLCD_RawSend@in stored from wreg
   673  0082  1283               	bcf	3,5	;RP0=0, select bank0
   674  0083  1303               	bcf	3,6	;RP1=0, select bank0
   675  0084  00A0               	movwf	fLCD_RawSend@in
   676                           
   677                           ;chrono.c: 102: unsigned char pt;
   678                           ;chrono.c: 103: PORTB = 0;
   679  0085  0186               	clrf	6	;volatile
   680                           
   681                           ;chrono.c: 104: pt = ((in >> 4) & 0x0f);
   682  0086  0820               	movf	fLCD_RawSend@in,w
   683  0087  00F5               	movwf	??_fLCD_RawSend
   684  0088  3004               	movlw	4
   685  0089                     u555:	
   686  0089  1003               	clrc
   687  008A  0CF5               	rrf	??_fLCD_RawSend,f
   688  008B  3EFF               	addlw	-1
   689  008C  1D03               	skipz
   690  008D  2889               	goto	u555
   691  008E  0875               	movf	??_fLCD_RawSend,w
   692  008F  390F               	andlw	15
   693  0090  00F6               	movwf	??_fLCD_RawSend+1
   694  0091  0876               	movf	??_fLCD_RawSend+1,w
   695  0092  00A1               	movwf	fLCD_RawSend@pt
   696                           
   697                           ;chrono.c: 105: if(pt & 0x01)
   698  0093  1821               	btfsc	fLCD_RawSend@pt,0
   699                           
   700                           ;chrono.c: 106: PORTBbits.RB0 = 1;
   701  0094  1406               	bsf	6,0	;volatile
   702                           
   703                           ;chrono.c: 107: if(pt & 0x02)
   704  0095  18A1               	btfsc	fLCD_RawSend@pt,1
   705                           
   706                           ;chrono.c: 108: PORTBbits.RB1 = 1;
   707  0096  1486               	bsf	6,1	;volatile
   708                           
   709                           ;chrono.c: 109: if(pt & 0x04)
   710  0097  1921               	btfsc	fLCD_RawSend@pt,2
   711                           
   712                           ;chrono.c: 110: PORTBbits.RB2 = 1;
   713  0098  1506               	bsf	6,2	;volatile
   714                           
   715                           ;chrono.c: 111: if(pt & 0x08)
   716  0099  19A1               	btfsc	fLCD_RawSend@pt,3
   717                           
   718                           ;chrono.c: 112: PORTBbits.RB3 = 1;
   719  009A  1586               	bsf	6,3	;volatile
   720                           
   721                           ;chrono.c: 113: if(mask)
   722  009B  0874               	movf	fLCD_RawSend@mask,w
   723  009C  1D03               	skipz
   724                           
   725                           ;chrono.c: 114: PORTBbits.RB4 = 1;
   726  009D  1606               	bsf	6,4	;volatile
   727                           
   728                           ;chrono.c: 115: _delay((unsigned long)((120)*(8000000/4000000.0)));
   729  009E  304F               	movlw	79
   730  009F  00F5               	movwf	??_fLCD_RawSend
   731  00A0                     u917:	
   732  00A0  0BF5               	decfsz	??_fLCD_RawSend,f
   733  00A1  28A0               	goto	u917
   734  00A2  28A3               	nop2	;nop
   735                           
   736                           ;chrono.c: 116: PORTBbits.RB5 = 1;
   737  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   738  00A4  1303               	bcf	3,6	;RP1=0, select bank0
   739  00A5  1686               	bsf	6,5	;volatile
   740                           
   741                           ;chrono.c: 117: _delay((unsigned long)((120)*(8000000/4000000.0)));
   742  00A6  304F               	movlw	79
   743  00A7  00F5               	movwf	??_fLCD_RawSend
   744  00A8                     u927:	
   745  00A8  0BF5               	decfsz	??_fLCD_RawSend,f
   746  00A9  28A8               	goto	u927
   747  00AA  28AB               	nop2	;nop
   748                           
   749                           ;chrono.c: 118: PORTBbits.RB5 = 0;
   750  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   751  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   752  00AD  1286               	bcf	6,5	;volatile
   753                           
   754                           ;chrono.c: 119: pt = (in & 0x0f);
   755  00AE  0820               	movf	fLCD_RawSend@in,w
   756  00AF  390F               	andlw	15
   757  00B0  00F5               	movwf	??_fLCD_RawSend
   758  00B1  0875               	movf	??_fLCD_RawSend,w
   759  00B2  00A1               	movwf	fLCD_RawSend@pt
   760                           
   761                           ;chrono.c: 120: _delay((unsigned long)((120)*(8000000/4000000.0)));
   762  00B3  304F               	movlw	79
   763  00B4  00F5               	movwf	??_fLCD_RawSend
   764  00B5                     u937:	
   765  00B5  0BF5               	decfsz	??_fLCD_RawSend,f
   766  00B6  28B5               	goto	u937
   767  00B7  28B8               	nop2	;nop
   768                           
   769                           ;chrono.c: 121: PORTBbits.RB0 = 0;
   770  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   771  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   772  00BA  1006               	bcf	6,0	;volatile
   773                           
   774                           ;chrono.c: 122: PORTBbits.RB1 = 0;
   775  00BB  1086               	bcf	6,1	;volatile
   776                           
   777                           ;chrono.c: 123: PORTBbits.RB2 = 0;
   778  00BC  1106               	bcf	6,2	;volatile
   779                           
   780                           ;chrono.c: 124: PORTBbits.RB3 = 0;
   781  00BD  1186               	bcf	6,3	;volatile
   782                           
   783                           ;chrono.c: 125: PORTBbits.RB4 = 0;
   784  00BE  1206               	bcf	6,4	;volatile
   785                           
   786                           ;chrono.c: 126: PORTBbits.RB5 = 0;
   787  00BF  1286               	bcf	6,5	;volatile
   788                           
   789                           ;chrono.c: 127: if(pt & 0x01)
   790  00C0  1821               	btfsc	fLCD_RawSend@pt,0
   791                           
   792                           ;chrono.c: 128: PORTBbits.RB0 = 1;
   793  00C1  1406               	bsf	6,0	;volatile
   794                           
   795                           ;chrono.c: 129: if(pt & 0x02)
   796  00C2  18A1               	btfsc	fLCD_RawSend@pt,1
   797                           
   798                           ;chrono.c: 130: PORTBbits.RB1 = 1;
   799  00C3  1486               	bsf	6,1	;volatile
   800                           
   801                           ;chrono.c: 131: if(pt & 0x04)
   802  00C4  1921               	btfsc	fLCD_RawSend@pt,2
   803                           
   804                           ;chrono.c: 132: PORTBbits.RB2 = 1;
   805  00C5  1506               	bsf	6,2	;volatile
   806                           
   807                           ;chrono.c: 133: if(pt & 0x08)
   808  00C6  19A1               	btfsc	fLCD_RawSend@pt,3
   809                           
   810                           ;chrono.c: 134: PORTBbits.RB3 = 1;
   811  00C7  1586               	bsf	6,3	;volatile
   812                           
   813                           ;chrono.c: 135: if(mask)
   814  00C8  0874               	movf	fLCD_RawSend@mask,w
   815  00C9  1D03               	skipz
   816                           
   817                           ;chrono.c: 136: PORTBbits.RB4 = 1;
   818  00CA  1606               	bsf	6,4	;volatile
   819                           
   820                           ;chrono.c: 137: _delay((unsigned long)((120)*(8000000/4000000.0)));
   821  00CB  304F               	movlw	79
   822  00CC  00F5               	movwf	??_fLCD_RawSend
   823  00CD                     u947:	
   824  00CD  0BF5               	decfsz	??_fLCD_RawSend,f
   825  00CE  28CD               	goto	u947
   826  00CF  28D0               	nop2	;nop
   827                           
   828                           ;chrono.c: 138: PORTBbits.RB5 = 1;
   829  00D0  1283               	bcf	3,5	;RP0=0, select bank0
   830  00D1  1303               	bcf	3,6	;RP1=0, select bank0
   831  00D2  1686               	bsf	6,5	;volatile
   832                           
   833                           ;chrono.c: 139: _delay((unsigned long)((120)*(8000000/4000000.0)));
   834  00D3  304F               	movlw	79
   835  00D4  00F5               	movwf	??_fLCD_RawSend
   836  00D5                     u957:	
   837  00D5  0BF5               	decfsz	??_fLCD_RawSend,f
   838  00D6  28D5               	goto	u957
   839  00D7  28D8               	nop2	;nop
   840                           
   841                           ;chrono.c: 140: PORTBbits.RB5 = 0;
   842  00D8  1283               	bcf	3,5	;RP0=0, select bank0
   843  00D9  1303               	bcf	3,6	;RP1=0, select bank0
   844  00DA  1286               	bcf	6,5	;volatile
   845                           
   846                           ;chrono.c: 141: _delay((unsigned long)((120)*(8000000/4000000.0)));
   847  00DB  304F               	movlw	79
   848  00DC  00F5               	movwf	??_fLCD_RawSend
   849  00DD                     u967:	
   850  00DD  0BF5               	decfsz	??_fLCD_RawSend,f
   851  00DE  28DD               	goto	u967
   852  00DF  28E0               	nop2	;nop
   853  00E0  0008               	return
   854  00E1                     __end_of_fLCD_RawSend:	
   855                           
   856                           	psect	text5
   857  013C                     __ptext5:	
   858 ;; *************** function _startUp *****************
   859 ;; Defined at:
   860 ;;		line 315 in file "chrono.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;		None               void
   867 ;; Registers used:
   868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   874 ;;      Params:         0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0
   876 ;;      Temps:          0       0       0       0       0
   877 ;;      Totals:         0       0       0       0       0
   878 ;;Total ram usage:        0 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    2
   881 ;; This function calls:
   882 ;;		_initializeInt
   883 ;;		_initializeTimer0
   884 ;;		_initializeTimer1
   885 ;; This function is called by:
   886 ;;		_main
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           
   891                           ;psect for function _startUp
   892  013C                     _startUp:	
   893                           
   894                           ;chrono.c: 316: OSCCON = 0x70;
   895                           
   896                           ;incstack = 0
   897                           ; Regs used in _startUp: [allreg]
   898  013C  3070               	movlw	112
   899  013D  1683               	bsf	3,5	;RP0=1, select bank1
   900  013E  1303               	bcf	3,6	;RP1=0, select bank1
   901  013F  008F               	movwf	15	;volatile
   902                           
   903                           ;chrono.c: 318: ANSEL = 0;
   904  0140  019B               	clrf	27	;volatile
   905                           
   906                           ;chrono.c: 319: CMCON = 0x07;
   907  0141  3007               	movlw	7
   908  0142  009C               	movwf	28	;volatile
   909                           
   910                           ;chrono.c: 321: OPTION_REG = 0xc0;
   911  0143  30C0               	movlw	192
   912  0144  0081               	movwf	1	;volatile
   913                           
   914                           ;chrono.c: 323: TRISB = 0b00000001;
   915  0145  3001               	movlw	1
   916  0146  0086               	movwf	6	;volatile
   917                           
   918                           ;chrono.c: 324: PORTB = 0;
   919  0147  1283               	bcf	3,5	;RP0=0, select bank0
   920  0148  1303               	bcf	3,6	;RP1=0, select bank0
   921  0149  0186               	clrf	6	;volatile
   922                           
   923                           ;chrono.c: 326: initializeInt();
   924  014A  118A  2162  118A   	fcall	_initializeInt
   925                           
   926                           ;chrono.c: 327: initializeTimer0();
   927  014D  118A  217A  118A   	fcall	_initializeTimer0
   928                           
   929                           ;chrono.c: 328: initializeTimer1();
   930  0150  118A  2183         	fcall	_initializeTimer1
   931  0152  0008               	return
   932  0153                     __end_of_startUp:	
   933                           
   934                           	psect	text6
   935  0183                     __ptext6:	
   936 ;; *************** function _initializeTimer1 *****************
   937 ;; Defined at:
   938 ;;		line 357 in file "chrono.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;		None               void
   945 ;; Registers used:
   946 ;;		wreg, status,2, status,0
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   952 ;;      Params:         0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0
   955 ;;      Totals:         0       0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    1
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_main
   963 ;;		_startUp
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           
   968                           ;psect for function _initializeTimer1
   969  0183                     _initializeTimer1:	
   970                           
   971                           ;chrono.c: 358: T1CONbits.T1CKPS = 0b00;
   972                           
   973                           ;incstack = 0
   974                           ; Regs used in _initializeTimer1: [wreg+status,2+status,0]
   975  0183  30CF               	movlw	-49
   976  0184  1283               	bcf	3,5	;RP0=0, select bank0
   977  0185  1303               	bcf	3,6	;RP1=0, select bank0
   978  0186  0590               	andwf	16,f	;volatile
   979                           
   980                           ;chrono.c: 359: T1CONbits.T1OSCEN = 1;
   981  0187  1590               	bsf	16,3	;volatile
   982                           
   983                           ;chrono.c: 360: T1CONbits.TMR1CS = 0;
   984  0188  1090               	bcf	16,1	;volatile
   985                           
   986                           ;chrono.c: 361: T1CONbits.TMR1ON = 1;
   987  0189  1410               	bsf	16,0	;volatile
   988  018A  0008               	return
   989  018B                     __end_of_initializeTimer1:	
   990                           
   991                           	psect	text7
   992  017A                     __ptext7:	
   993 ;; *************** function _initializeTimer0 *****************
   994 ;; Defined at:
   995 ;;		line 365 in file "chrono.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;		None
   998 ;; Auto vars:     Size  Location     Type
   999 ;;		None
  1000 ;; Return value:  Size  Location     Type
  1001 ;;		None               void
  1002 ;; Registers used:
  1003 ;;		wreg, status,2, status,0
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1009 ;;      Params:         0       0       0       0       0
  1010 ;;      Locals:         0       0       0       0       0
  1011 ;;      Temps:          0       0       0       0       0
  1012 ;;      Totals:         0       0       0       0       0
  1013 ;;Total ram usage:        0 bytes
  1014 ;; Hardware stack levels used:    1
  1015 ;; Hardware stack levels required when called:    1
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;;		_startUp
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           
  1025                           ;psect for function _initializeTimer0
  1026  017A                     _initializeTimer0:	
  1027                           
  1028                           ;chrono.c: 366: OPTION_REGbits.T0CS = 0;
  1029                           
  1030                           ;incstack = 0
  1031                           ; Regs used in _initializeTimer0: [wreg+status,2+status,0]
  1032  017A  1683               	bsf	3,5	;RP0=1, select bank1
  1033  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1034  017C  1281               	bcf	1,5	;volatile
  1035                           
  1036                           ;chrono.c: 367: OPTION_REGbits.PSA = 0;
  1037  017D  1181               	bcf	1,3	;volatile
  1038                           
  1039                           ;chrono.c: 368: OPTION_REGbits.PS = 0b100;
  1040  017E  0801               	movf	1,w	;volatile
  1041  017F  39F8               	andlw	-8
  1042  0180  3804               	iorlw	4
  1043  0181  0081               	movwf	1	;volatile
  1044  0182  0008               	return
  1045  0183                     __end_of_initializeTimer0:	
  1046                           
  1047                           	psect	text8
  1048  0162                     __ptext8:	
  1049 ;; *************** function _initializeInt *****************
  1050 ;; Defined at:
  1051 ;;		line 348 in file "chrono.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;		None
  1056 ;; Return value:  Size  Location     Type
  1057 ;;		None               void
  1058 ;; Registers used:
  1059 ;;		None
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1065 ;;      Params:         0       0       0       0       0
  1066 ;;      Locals:         0       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0
  1068 ;;      Totals:         0       0       0       0       0
  1069 ;;Total ram usage:        0 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;;		_startUp
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           
  1081                           ;psect for function _initializeInt
  1082  0162                     _initializeInt:	
  1083                           
  1084                           ;chrono.c: 349: TMR1IE = 1;
  1085                           
  1086                           ;incstack = 0
  1087                           ; Regs used in _initializeInt: []
  1088  0162  1683               	bsf	3,5	;RP0=1, select bank1
  1089  0163  1303               	bcf	3,6	;RP1=0, select bank1
  1090  0164  140C               	bsf	12,0	;volatile
  1091                           
  1092                           ;chrono.c: 350: TMR0IE = 1;
  1093  0165  168B               	bsf	11,5	;volatile
  1094                           
  1095                           ;chrono.c: 351: (GIE = 1);
  1096  0166  178B               	bsf	11,7	;volatile
  1097                           
  1098                           ;chrono.c: 352: INTCONbits.PEIE = 1;
  1099  0167  170B               	bsf	11,6	;volatile
  1100                           
  1101                           ;chrono.c: 353: PIR1bits.RCIF = 0;
  1102  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1103  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1104  016A  128C               	bcf	12,5	;volatile
  1105                           
  1106                           ;chrono.c: 354: PIE1bits.RCIE = 0;
  1107  016B  1683               	bsf	3,5	;RP0=1, select bank1
  1108  016C  1303               	bcf	3,6	;RP1=0, select bank1
  1109  016D  128C               	bcf	12,5	;volatile
  1110  016E  0008               	return
  1111  016F                     __end_of_initializeInt:	
  1112                           
  1113                           	psect	text9
  1114  0153                     __ptext9:	
  1115 ;; *************** function _isr *****************
  1116 ;; Defined at:
  1117 ;;		line 335 in file "chrono.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;		None
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;		None
  1122 ;; Return value:  Size  Location     Type
  1123 ;;		None               void
  1124 ;; Registers used:
  1125 ;;		None
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1131 ;;      Params:         0       0       0       0       0
  1132 ;;      Locals:         0       0       0       0       0
  1133 ;;      Temps:          4       0       0       0       0
  1134 ;;      Totals:         4       0       0       0       0
  1135 ;;Total ram usage:        4 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		Interrupt level 1
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function _isr
  1146  0153                     _isr:	
  1147                           
  1148                           ;chrono.c: 338: if(TMR1IF){
  1149  0153  180C               	btfsc	12,0	;volatile
  1150                           
  1151                           ;chrono.c: 339: TMR1IF = 0;
  1152  0154  100C               	bcf	12,0	;volatile
  1153                           
  1154                           ;chrono.c: 340: }
  1155                           ;chrono.c: 342: if(TMR0IF){
  1156  0155  190B               	btfsc	11,2	;volatile
  1157                           
  1158                           ;chrono.c: 343: TMR0IF = 0;
  1159  0156  110B               	bcf	11,2	;volatile
  1160  0157  0873               	movf	??_isr+3,w
  1161  0158  00FF               	movwf	127
  1162  0159  0872               	movf	??_isr+2,w
  1163  015A  008A               	movwf	10
  1164  015B  0871               	movf	??_isr+1,w
  1165  015C  0084               	movwf	4
  1166  015D  0E70               	swapf	??_isr^(0+-128),w
  1167  015E  0083               	movwf	3
  1168  015F  0EFE               	swapf	126,f
  1169  0160  0E7E               	swapf	126,w
  1170  0161  0009               	retfie
  1171  0162                     __end_of_isr:	
  1172  007E                     btemp	set	126	;btemp
  1173  007E                     wtemp0	set	126
  1174                           
  1175                           	psect	intentry
  1176  0004                     __pintentry:	
  1177                           ;incstack = 0
  1178                           ; Regs used in _isr: []
  1179                           
  1180  0004                     interrupt_function:	
  1181  007E                     saved_w	set	btemp
  1182  0004  00FE               	movwf	btemp
  1183  0005  0E03               	swapf	3,w
  1184  0006  00F0               	movwf	??_isr
  1185  0007  0804               	movf	4,w
  1186  0008  00F1               	movwf	??_isr+1
  1187  0009  080A               	movf	10,w
  1188  000A  00F2               	movwf	??_isr+2
  1189  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1190  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1191  000D  087F               	movf	btemp+1,w
  1192  000E  00F3               	movwf	??_isr+3
  1193  000F  118A  2953         	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      9       9
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_fLCD_PrintASCII
    _fLCD_PrintASCII->_fLCD_RawSend
    _fLCD_Start->_fLCD_RawSend
    _fLCD_Clear->_fLCD_RawSend

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_fLCD_Start
    _fLCD_PrintASCII->_fLCD_RawSend
    _fLCD_Start->_fLCD_Clear
    _fLCD_Clear->_fLCD_RawSend

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1165
                                              6 BANK0      3     3      0
                            _startUp
                      _initializeInt
                   _initializeTimer0
                   _initializeTimer1
                         _fLCD_Start
                    _fLCD_PrintASCII
 ---------------------------------------------------------------------------------
 (1) _fLCD_PrintASCII                                      2     2      0     409
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                       _fLCD_RawSend
 ---------------------------------------------------------------------------------
 (1) _fLCD_Start                                           2     2      0     756
                                              4 BANK0      2     2      0
                       _fLCD_RawSend
                         _fLCD_Clear
 ---------------------------------------------------------------------------------
 (2) _fLCD_Clear                                           2     2      0     378
                                              2 BANK0      2     2      0
                       _fLCD_RawSend
 ---------------------------------------------------------------------------------
 (2) _fLCD_RawSend                                         5     4      1     378
                                              4 COMMON     3     2      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _startUp                                              0     0      0       0
                      _initializeInt
                   _initializeTimer0
                   _initializeTimer1
 ---------------------------------------------------------------------------------
 (1) _initializeTimer1                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initializeTimer0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initializeInt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _startUp
     _initializeInt
     _initializeTimer0
     _initializeTimer1
   _initializeInt
   _initializeTimer0
   _initializeTimer1
   _fLCD_Start
     _fLCD_RawSend
     _fLCD_Clear
       _fLCD_RawSend
   _fLCD_PrintASCII
     _fLCD_RawSend

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       3       2        0.0%
ABS                  0      0      13       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      9       9       5       11.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      16      12        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Tue Aug 12 22:29:24 2014

              __CFG_CP$OFF 0000                         l57 011A             ??_fLCD_RawSend 0075  
                      _GIE 005F               __CFG_CPD$OFF 0000                        u555 0089  
                      u817 00F5                        u907 0136                        u827 001A  
                      u917 00A0                        u837 002A                        u927 00A8  
                      u847 003A                        u937 00B5                        u857 004A  
                      u947 00CD                        u867 005A                        u957 00D5  
                      u877 006A                        u967 00DD                        u887 007A  
                      u897 0126                        _isr 0153   __size_of_fLCD_PrintASCII 000B  
                      fsr0 0004               __CFG_IESO$ON 0000               __CFG_LVP$OFF 0000  
                     ?_isr 0070               __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000  
                     _main 00E1                       btemp 007E                       start 0011  
            __CFG_MCLRE$ON 0000                      ??_isr 0070                      ?_main 0070  
            __CFG_WDTE$OFF 0000                      _CMCON 009C                      _ANSEL 009B  
                    _PORTB 0006                      _TRISB 0086             __CFG_CCPMX$RB0 0000  
               _fLCD_Clear 011B                 _fLCD_Start 0013                      _tflag 0078  
           __CFG_BOREN$OFF 0000                      pclath 000A            __end_of_startUp 0153  
                    status 0003                      wtemp0 007E            __initialization 018B  
             __end_of_main 011B                     ??_main 0026          ??_fLCD_PrintASCII 0077  
                   _OSCCON 008F                     _TMR0IE 005D                     _TMR0IF 005A  
                   _TMR1IE 0460                     _TMR1IF 0060          ?_initializeTimer0 0070  
        ?_initializeTimer1 0070       __end_of_fLCD_RawSend 00E1         ??_initializeTimer0 0074  
       ??_initializeTimer1 0074             __CFG_PWRTE$OFF 0000                     saved_w 007E  
              ?_fLCD_Clear 0070     __size_of_initializeInt 000D                  ??_startUp 0074  
              ?_fLCD_Start 0070    __end_of__initialization 018D             __pcstackCOMMON 0070  
           _OPTION_REGbits 0081                 __pmaintext 00E1              _initializeInt 0162  
      __size_of_fLCD_Clear 0021                 __pintentry 0004        __size_of_fLCD_Start 006F  
    __size_of_fLCD_RawSend 005F             ?_initializeInt 0070                    __ptext0 0000  
                  __ptext1 016F                    __ptext2 0013                    __ptext3 011B  
                  __ptext4 0082                    __ptext5 013C                    __ptext6 0183  
                  __ptext7 017A                    __ptext8 0162                    __ptext9 0153  
          _fLCD_PrintASCII 016F               _fLCD_RawSend 0082                  _T1CONbits 0010  
             __size_of_isr 000F                    _startUp 013C       end_of_initialization 018D  
__size_of_initializeTimer0 0009  __size_of_initializeTimer1 0008                  _PORTBbits 0006  
             ??_fLCD_Clear 0022               ??_fLCD_Start 0024            ??_initializeInt 0074  
  __end_of_fLCD_PrintASCII 017A         __end_of_fLCD_Clear 013C         __end_of_fLCD_Start 0082  
      start_initialization 018B                __end_of_isr 0162   fLCD_PrintASCII@Character 0022  
              __pbssCOMMON 0078              __pcstackBANK0 0020           fLCD_RawSend@mask 0074  
         ?_fLCD_PrintASCII 0070           _initializeTimer0 017A           _initializeTimer1 0183  
                 ?_startUp 0070          interrupt_function 0004                   _PIE1bits 008C  
                 _PIR1bits 000C           __size_of_startUp 0017              __size_of_main 003A  
    __end_of_initializeInt 016F                 _INTCONbits 000B                   intlevel1 0000  
           fLCD_RawSend@in 0020             fLCD_RawSend@pt 0021   __end_of_initializeTimer0 0183  
 __end_of_initializeTimer1 018B              ?_fLCD_RawSend 0074                 _OPTION_REG 0081  
       __CFG_FOSC$INTOSCIO 0000  
