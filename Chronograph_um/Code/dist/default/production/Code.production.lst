

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Sat Aug 16 00:09:53 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     	;# 
    24  0001                     	;# 
    25  0002                     	;# 
    26  0003                     	;# 
    27  0004                     	;# 
    28  0005                     	;# 
    29  0006                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000D                     	;# 
    34  000E                     	;# 
    35  000E                     	;# 
    36  000F                     	;# 
    37  0010                     	;# 
    38  0011                     	;# 
    39  0012                     	;# 
    40  0013                     	;# 
    41  0014                     	;# 
    42  0015                     	;# 
    43  0015                     	;# 
    44  0016                     	;# 
    45  0017                     	;# 
    46  0018                     	;# 
    47  0019                     	;# 
    48  001A                     	;# 
    49  001E                     	;# 
    50  001F                     	;# 
    51  0081                     	;# 
    52  0085                     	;# 
    53  0086                     	;# 
    54  008C                     	;# 
    55  008D                     	;# 
    56  008E                     	;# 
    57  008F                     	;# 
    58  0090                     	;# 
    59  0092                     	;# 
    60  0093                     	;# 
    61  0094                     	;# 
    62  0098                     	;# 
    63  0099                     	;# 
    64  009B                     	;# 
    65  009C                     	;# 
    66  009D                     	;# 
    67  009E                     	;# 
    68  009F                     	;# 
    69  0105                     	;# 
    70  010C                     	;# 
    71  010D                     	;# 
    72  010E                     	;# 
    73  010F                     	;# 
    74  018C                     	;# 
    75  018D                     	;# 
    76  000B                     _INTCONbits	set	11
    77  000C                     _PIR1bits	set	12
    78  0005                     _PORTA	set	5
    79  0006                     _PORTB	set	6
    80  0006                     _PORTBbits	set	6
    81  0010                     _T1CONbits	set	16
    82  005F                     _GIE	set	95
    83  005D                     _TMR0IE	set	93
    84  009B                     _ANSEL	set	155
    85  009C                     _CMCON	set	156
    86  0081                     _OPTION_REG	set	129
    87  0081                     _OPTION_REGbits	set	129
    88  008F                     _OSCCON	set	143
    89  008C                     _PIE1bits	set	140
    90  0085                     _TRISA	set	133
    91  0086                     _TRISB	set	134
    92  0460                     _TMR1IE	set	1120
    93                           
    94                           	psect	strings
    95  0307                     __pstrings:	
    96  0307                     stringtab:	
    97  0307                     __stringtab:	
    98  0307                     stringcode:	
    99                           ;	String table - string pointers are 1 byte each
   100                           
   101  0307                     stringdir:	
   102  0307  3003               	movlw	high stringdir
   103  0308  008A               	movwf	10
   104  0309  0804               	movf	4,w
   105  030A  0A84               	incf	4,f
   106  030B  0782               	addwf	2,f
   107  030C                     __stringbase:	
   108  030C  3400               	retlw	0
   109  030D                     __end_of__stringtab:	
   110  030D                     __stringdata:	
   111  030D                     STR_1:	
   112  030D  3466               	retlw	102	;'f'
   113  030E  3470               	retlw	112	;'p'
   114  030F  3473               	retlw	115	;'s'
   115  0310  3400               	retlw	0
   116  0311                     __end_of__stringdata:	
   117                           
   118                           ; #config settings
   119  0000                     
   120                           	psect	cinit
   121  0322                     start_initialization:	
   122  0322                     __initialization:	
   123                           
   124                           ; Clear objects allocated to COMMON
   125  0322  01F6               	clrf	__pbssCOMMON& (0+127)
   126  0323  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   127  0324  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   128  0325  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   129  0326                     end_of_initialization:	
   130                           ;End of C runtime variable initialization code
   131                           
   132  0326                     __end_of__initialization:	
   133  0326  0183               	clrf	3
   134  0327  118A  2A56         	ljmp	_main	;jump to C main() function
   135                           
   136                           	psect	bssCOMMON
   137  0076                     __pbssCOMMON:	
   138  0076                     _tflag:	
   139  0076                     	ds	2
   140  0078                     _time:	
   141  0078                     	ds	2
   142                           
   143                           	psect	cstackCOMMON
   144  0070                     __pcstackCOMMON:	
   145  0070                     ?_startUp:	
   146  0070                     ?_fLCD_Start:	
   147                           ; 0 bytes @ 0x0
   148                           
   149  0070                     ?_fLCD_Clear:	
   150                           ; 0 bytes @ 0x0
   151                           
   152  0070                     ?_initializeInt:	
   153                           ; 0 bytes @ 0x0
   154                           
   155  0070                     ?_initializeTimer0:	
   156                           ; 0 bytes @ 0x0
   157                           
   158  0070                     ?_initializeTimer1:	
   159                           ; 0 bytes @ 0x0
   160                           
   161  0070                     ?_main:	
   162                           ; 0 bytes @ 0x0
   163                           
   164  0070                     ?_isr:	
   165                           ; 0 bytes @ 0x0
   166                           
   167  0070                     ??_isr:	
   168                           ; 0 bytes @ 0x0
   169                           
   170                           
   171                           ; 0 bytes @ 0x0
   172  0070                     	ds	4
   173  0074                     ??_startUp:	
   174  0074                     ?_fLCD_RawSend:	
   175                           ; 0 bytes @ 0x4
   176                           
   177  0074                     ??_initializeInt:	
   178                           ; 0 bytes @ 0x4
   179                           
   180  0074                     ??_initializeTimer0:	
   181                           ; 0 bytes @ 0x4
   182                           
   183  0074                     ??_initializeTimer1:	
   184                           ; 0 bytes @ 0x4
   185                           
   186  0074                     ??___awdiv:	
   187                           ; 0 bytes @ 0x4
   188                           
   189  0074                     fLCD_RawSend@mask:	
   190                           ; 0 bytes @ 0x4
   191                           
   192                           
   193                           ; 1 bytes @ 0x4
   194  0074                     	ds	1
   195  0075                     ??_fLCD_PrintNumber:	
   196  0075                     ?_fLCD_PrintString:	
   197                           ; 0 bytes @ 0x5
   198                           
   199  0075                     fLCD_PrintString@MSZ_String:	
   200                           ; 0 bytes @ 0x5
   201                           
   202                           
   203                           ; 1 bytes @ 0x5
   204  0075                     	ds	1
   205                           
   206                           	psect	cstackBANK0
   207  0020                     __pcstackBANK0:	
   208  0020                     ??_fLCD_RawSend:	
   209  0020                     ?___awdiv:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0020                     ___awdiv@divisor:	
   213                           ; 2 bytes @ 0x0
   214                           
   215                           
   216                           ; 2 bytes @ 0x0
   217  0020                     	ds	2
   218  0022                     fLCD_RawSend@in:	
   219  0022                     ___awdiv@dividend:	
   220                           ; 1 bytes @ 0x2
   221                           
   222                           
   223                           ; 2 bytes @ 0x2
   224  0022                     	ds	1
   225  0023                     fLCD_RawSend@pt:	
   226                           
   227                           ; 1 bytes @ 0x3
   228  0023                     	ds	1
   229  0024                     ??_fLCD_PrintString:	
   230  0024                     ??_fLCD_Clear:	
   231                           ; 0 bytes @ 0x4
   232                           
   233  0024                     ___awdiv@counter:	
   234                           ; 0 bytes @ 0x4
   235                           
   236                           
   237                           ; 1 bytes @ 0x4
   238  0024                     	ds	1
   239  0025                     fLCD_PrintString@String:	
   240  0025                     ___awdiv@sign:	
   241                           ; 1 bytes @ 0x5
   242                           
   243                           
   244                           ; 1 bytes @ 0x5
   245  0025                     	ds	1
   246  0026                     ??_fLCD_Start:	
   247  0026                     fLCD_PrintString@idx:	
   248                           ; 0 bytes @ 0x6
   249                           
   250  0026                     ___awdiv@quotient:	
   251                           ; 1 bytes @ 0x6
   252                           
   253                           
   254                           ; 2 bytes @ 0x6
   255  0026                     	ds	2
   256  0028                     ?_fLCD_PrintNumber:	
   257  0028                     fLCD_PrintNumber@Number:	
   258                           ; 0 bytes @ 0x8
   259                           
   260                           
   261                           ; 2 bytes @ 0x8
   262  0028                     	ds	2
   263  002A                     fLCD_PrintNumber@tmp_int:	
   264                           
   265                           ; 2 bytes @ 0xA
   266  002A                     	ds	2
   267  002C                     fLCD_PrintNumber@tmp_byte:	
   268                           
   269                           ; 1 bytes @ 0xC
   270  002C                     	ds	1
   271  002D                     ??_main:	
   272                           
   273                           ; 0 bytes @ 0xD
   274  002D                     	ds	3
   275                           
   276                           	psect	maintext
   277  0256                     __pmaintext:	
   278 ;;
   279 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   280 ;;
   281 ;; *************** function _main *****************
   282 ;; Defined at:
   283 ;;		line 61 in file "chrono.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;		None
   286 ;; Auto vars:     Size  Location     Type
   287 ;;		None
   288 ;; Return value:  Size  Location     Type
   289 ;;		None               void
   290 ;; Registers used:
   291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   292 ;; Tracked objects:
   293 ;;		On entry : 17F/0
   294 ;;		On exit  : 0/0
   295 ;;		Unchanged: 0/0
   296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   297 ;;      Params:         0       0       0       0       0
   298 ;;      Locals:         0       0       0       0       0
   299 ;;      Temps:          0       3       0       0       0
   300 ;;      Totals:         0       3       0       0       0
   301 ;;Total ram usage:        3 bytes
   302 ;; Hardware stack levels required when called:    4
   303 ;; This function calls:
   304 ;;		_startUp
   305 ;;		_fLCD_Start
   306 ;;		_fLCD_PrintNumber
   307 ;;		_fLCD_PrintString
   308 ;; This function is called by:
   309 ;;		Startup code after reset
   310 ;; This function uses a non-reentrant model
   311 ;;
   312                           
   313                           
   314                           ;psect for function _main
   315  0256                     _main:	
   316                           
   317                           ;chrono.c: 63: startUp();
   318                           
   319                           ;incstack = 0
   320                           ; Regs used in _main: [allreg]
   321  0256  118A  22D7  118A   	fcall	_startUp
   322                           
   323                           ;chrono.c: 64: _delay((unsigned long)((120)*(8000000/4000.0)));
   324  0259  3002               	movlw	2
   325  025A  1283               	bcf	3,5	;RP0=0, select bank0
   326  025B  1303               	bcf	3,6	;RP1=0, select bank0
   327  025C  00AF               	movwf	??_main+2
   328  025D  3038               	movlw	56
   329  025E  00AE               	movwf	??_main+1
   330  025F  30AD               	movlw	173
   331  0260  00AD               	movwf	??_main
   332  0261                     u1097:	
   333  0261  0BAD               	decfsz	??_main,f
   334  0262  2A61               	goto	u1097
   335  0263  0BAE               	decfsz	??_main+1,f
   336  0264  2A61               	goto	u1097
   337  0265  0BAF               	decfsz	??_main+2,f
   338  0266  2A61               	goto	u1097
   339                           
   340                           ;chrono.c: 65: fLCD_Start();
   341  0267  118A  2129  118A   	fcall	_fLCD_Start
   342                           
   343                           ;chrono.c: 67: PORTBbits.RB0 = 1;
   344  026A  1283               	bcf	3,5	;RP0=0, select bank0
   345  026B  1303               	bcf	3,6	;RP1=0, select bank0
   346  026C  1406               	bsf	6,0	;volatile
   347  026D                     l1250:	
   348                           ;chrono.c: 69: for(;;){
   349                           
   350                           
   351                           ;chrono.c: 70: fLCD_PrintNumber(380);
   352  026D  307C               	movlw	124
   353  026E  1283               	bcf	3,5	;RP0=0, select bank0
   354  026F  1303               	bcf	3,6	;RP1=0, select bank0
   355  0270  00A8               	movwf	?_fLCD_PrintNumber
   356  0271  3001               	movlw	1
   357  0272  00A9               	movwf	?_fLCD_PrintNumber+1
   358  0273  118A  2013  118A   	fcall	_fLCD_PrintNumber
   359                           
   360                           ;chrono.c: 71: fLCD_PrintString("fps",3);
   361  0276  3003               	movlw	3
   362  0277  1283               	bcf	3,5	;RP0=0, select bank0
   363  0278  1303               	bcf	3,6	;RP1=0, select bank0
   364  0279  00AD               	movwf	??_main
   365  027A  082D               	movf	??_main,w
   366  027B  00F5               	movwf	?_fLCD_PrintString
   367  027C  3001               	movlw	(STR_1-__stringbase)& (0+255)
   368  027D  118A  2290  118A   	fcall	_fLCD_PrintString
   369                           
   370                           ;chrono.c: 72: _delay((unsigned long)((1000)*(8000000/4000.0)));
   371  0280  300B               	movlw	11
   372  0281  1283               	bcf	3,5	;RP0=0, select bank0
   373  0282  1303               	bcf	3,6	;RP1=0, select bank0
   374  0283  00AF               	movwf	??_main+2
   375  0284  3026               	movlw	38
   376  0285  00AE               	movwf	??_main+1
   377  0286  3066               	movlw	102
   378  0287  00AD               	movwf	??_main
   379  0288                     u1107:	
   380  0288  0BAD               	decfsz	??_main,f
   381  0289  2A88               	goto	u1107
   382  028A  0BAE               	decfsz	??_main+1,f
   383  028B  2A88               	goto	u1107
   384  028C  0BAF               	decfsz	??_main+2,f
   385  028D  2A88               	goto	u1107
   386  028E  2A8F               	nop2
   387                           
   388                           ;chrono.c: 80: }
   389  028F  2A6D               	goto	l1250
   390  0290                     __end_of_main:	
   391                           
   392                           	psect	text1
   393  0290                     __ptext1:	
   394 ;; *************** function _fLCD_PrintString *****************
   395 ;; Defined at:
   396 ;;		line 252 in file "chrono.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;  String          1    wreg     PTR unsigned char 
   399 ;;		 -> STR_1(4), 
   400 ;;  MSZ_String      1    5[COMMON] unsigned char 
   401 ;; Auto vars:     Size  Location     Type
   402 ;;  String          1    5[BANK0 ] PTR unsigned char 
   403 ;;		 -> STR_1(4), 
   404 ;;  idx             1    6[BANK0 ] unsigned char 
   405 ;; Return value:  Size  Location     Type
   406 ;;		None               void
   407 ;; Registers used:
   408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         1       0       0       0       0
   415 ;;      Locals:         0       2       0       0       0
   416 ;;      Temps:          0       1       0       0       0
   417 ;;      Totals:         1       3       0       0       0
   418 ;;Total ram usage:        4 bytes
   419 ;; Hardware stack levels used:    1
   420 ;; Hardware stack levels required when called:    2
   421 ;; This function calls:
   422 ;;		_fLCD_RawSend
   423 ;; This function is called by:
   424 ;;		_main
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428                           
   429                           ;psect for function _fLCD_PrintString
   430  0290                     _fLCD_PrintString:	
   431                           
   432                           ;incstack = 0
   433                           ; Regs used in _fLCD_PrintString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   434                           ;fLCD_PrintString@String stored from wreg
   435  0290  1283               	bcf	3,5	;RP0=0, select bank0
   436  0291  1303               	bcf	3,6	;RP1=0, select bank0
   437  0292  00A5               	movwf	fLCD_PrintString@String
   438                           
   439                           ;chrono.c: 253: char idx = 0;
   440  0293  01A6               	clrf	fLCD_PrintString@idx
   441                           
   442                           ;chrono.c: 255: for(idx=0; idx<MSZ_String; idx++){
   443  0294  01A6               	clrf	fLCD_PrintString@idx
   444  0295                     l1338:	
   445  0295  0875               	movf	fLCD_PrintString@MSZ_String,w
   446  0296  0226               	subwf	fLCD_PrintString@idx,w
   447  0297  1803               	btfsc	3,0
   448  0298  0008               	return
   449                           
   450                           ;chrono.c: 256: if(String[idx] == 0)
   451  0299  0826               	movf	fLCD_PrintString@idx,w
   452  029A  0725               	addwf	fLCD_PrintString@String,w
   453  029B  0084               	movwf	4
   454  029C  118A  2307  118A   	fcall	stringdir
   455  029F  3800               	iorlw	0
   456  02A0  1903               	btfsc	3,2
   457  02A1  0008               	return
   458                           
   459                           ;chrono.c: 258: fLCD_RawSend(String[idx], 0x10);
   460                           
   461                           ;chrono.c: 257: break;
   462  02A2  3010               	movlw	16
   463  02A3  00A4               	movwf	??_fLCD_PrintString
   464  02A4  0824               	movf	??_fLCD_PrintString,w
   465  02A5  00F4               	movwf	?_fLCD_RawSend
   466  02A6  0826               	movf	fLCD_PrintString@idx,w
   467  02A7  0725               	addwf	fLCD_PrintString@String,w
   468  02A8  0084               	movwf	4
   469  02A9  118A  2307  118A   	fcall	stringdir
   470  02AC  118A  2199  118A   	fcall	_fLCD_RawSend
   471  02AF  3001               	movlw	1
   472  02B0  1283               	bcf	3,5	;RP0=0, select bank0
   473  02B1  1303               	bcf	3,6	;RP1=0, select bank0
   474  02B2  00A4               	movwf	??_fLCD_PrintString
   475  02B3  0824               	movf	??_fLCD_PrintString,w
   476  02B4  07A6               	addwf	fLCD_PrintString@idx,f
   477  02B5  2A95               	goto	l1338
   478  02B6                     __end_of_fLCD_PrintString:	
   479                           
   480                           	psect	text2
   481  0013                     __ptext2:	
   482 ;; *************** function _fLCD_PrintNumber *****************
   483 ;; Defined at:
   484 ;;		line 201 in file "chrono.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;  Number          2    8[BANK0 ] short 
   487 ;; Auto vars:     Size  Location     Type
   488 ;;  tmp_int         2   10[BANK0 ] short 
   489 ;;  tmp_byte        1   12[BANK0 ] unsigned char 
   490 ;; Return value:  Size  Location     Type
   491 ;;		None               void
   492 ;; Registers used:
   493 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   499 ;;      Params:         0       2       0       0       0
   500 ;;      Locals:         0       3       0       0       0
   501 ;;      Temps:          1       0       0       0       0
   502 ;;      Totals:         1       5       0       0       0
   503 ;;Total ram usage:        6 bytes
   504 ;; Hardware stack levels used:    1
   505 ;; Hardware stack levels required when called:    2
   506 ;; This function calls:
   507 ;;		_fLCD_RawSend
   508 ;;		___awdiv
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           
   515                           ;psect for function _fLCD_PrintNumber
   516  0013                     _fLCD_PrintNumber:	
   517                           
   518                           ;chrono.c: 202: short tmp_int;
   519                           ;chrono.c: 203: char tmp_byte;
   520                           ;chrono.c: 204: if(Number < 0){
   521                           
   522                           ;incstack = 0
   523                           ; Regs used in _fLCD_PrintNumber: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   524  0013  1283               	bcf	3,5	;RP0=0, select bank0
   525  0014  1303               	bcf	3,6	;RP1=0, select bank0
   526  0015  1FA9               	btfss	fLCD_PrintNumber@Number+1,7
   527  0016  2826               	goto	l1292
   528                           
   529                           ;chrono.c: 205: fLCD_RawSend('-', 0x10);
   530  0017  3010               	movlw	16
   531  0018  00F5               	movwf	??_fLCD_PrintNumber
   532  0019  0875               	movf	??_fLCD_PrintNumber,w
   533  001A  00F4               	movwf	?_fLCD_RawSend
   534  001B  302D               	movlw	45
   535  001C  118A  2199  118A   	fcall	_fLCD_RawSend
   536                           
   537                           ;chrono.c: 206: Number = 0 - Number;
   538  001F  1283               	bcf	3,5	;RP0=0, select bank0
   539  0020  1303               	bcf	3,6	;RP1=0, select bank0
   540  0021  09A8               	comf	fLCD_PrintNumber@Number,f
   541  0022  09A9               	comf	fLCD_PrintNumber@Number+1,f
   542  0023  0AA8               	incf	fLCD_PrintNumber@Number,f
   543  0024  1903               	skipnz
   544  0025  0AA9               	incf	fLCD_PrintNumber@Number+1,f
   545  0026                     l1292:	
   546                           
   547                           ;chrono.c: 207: }
   548                           ;chrono.c: 209: tmp_int = Number;
   549  0026  0829               	movf	fLCD_PrintNumber@Number+1,w
   550  0027  01AB               	clrf	fLCD_PrintNumber@tmp_int+1
   551  0028  07AB               	addwf	fLCD_PrintNumber@tmp_int+1,f
   552  0029  0828               	movf	fLCD_PrintNumber@Number,w
   553  002A  01AA               	clrf	fLCD_PrintNumber@tmp_int
   554  002B  07AA               	addwf	fLCD_PrintNumber@tmp_int,f
   555                           
   556                           ;chrono.c: 210: if(Number >= 10000){
   557  002C  0829               	movf	fLCD_PrintNumber@Number+1,w
   558  002D  3A80               	xorlw	128
   559  002E  00FF               	movwf	127
   560  002F  30A7               	movlw	167
   561  0030  027F               	subwf	127,w
   562  0031  1D03               	skipz
   563  0032  2835               	goto	u745
   564  0033  3010               	movlw	16
   565  0034  0228               	subwf	fLCD_PrintNumber@Number,w
   566  0035                     u745:	
   567  0035  1C03               	skipc
   568  0036  2867               	goto	l1302
   569                           
   570                           ;chrono.c: 211: tmp_byte = tmp_int/10000;
   571  0037  3010               	movlw	16
   572  0038  1283               	bcf	3,5	;RP0=0, select bank0
   573  0039  1303               	bcf	3,6	;RP1=0, select bank0
   574  003A  00A0               	movwf	?___awdiv
   575  003B  3027               	movlw	39
   576  003C  00A1               	movwf	?___awdiv+1
   577  003D  082B               	movf	fLCD_PrintNumber@tmp_int+1,w
   578  003E  01A3               	clrf	?___awdiv+3
   579  003F  07A3               	addwf	?___awdiv+3,f
   580  0040  082A               	movf	fLCD_PrintNumber@tmp_int,w
   581  0041  01A2               	clrf	?___awdiv+2
   582  0042  07A2               	addwf	?___awdiv+2,f
   583  0043  118A  21F9  118A   	fcall	___awdiv
   584  0046  1283               	bcf	3,5	;RP0=0, select bank0
   585  0047  1303               	bcf	3,6	;RP1=0, select bank0
   586  0048  0820               	movf	?___awdiv,w
   587  0049  00F5               	movwf	??_fLCD_PrintNumber
   588  004A  0875               	movf	??_fLCD_PrintNumber,w
   589  004B  00AC               	movwf	fLCD_PrintNumber@tmp_byte
   590                           
   591                           ;chrono.c: 212: fLCD_RawSend('0' + tmp_byte, 0x10);
   592  004C  3010               	movlw	16
   593  004D  00F5               	movwf	??_fLCD_PrintNumber
   594  004E  0875               	movf	??_fLCD_PrintNumber,w
   595  004F  00F4               	movwf	?_fLCD_RawSend
   596  0050  082C               	movf	fLCD_PrintNumber@tmp_byte,w
   597  0051  3E30               	addlw	48
   598  0052  118A  2199  118A   	fcall	_fLCD_RawSend
   599  0055                     l1300:	
   600                           ;chrono.c: 214: while(tmp_byte > 0){
   601                           
   602  0055  1283               	bcf	3,5	;RP0=0, select bank0
   603  0056  1303               	bcf	3,6	;RP1=0, select bank0
   604  0057  08AC               	movf	fLCD_PrintNumber@tmp_byte,f
   605  0058  1903               	btfsc	3,2
   606  0059  2867               	goto	l1302
   607                           
   608                           ;chrono.c: 215: tmp_int = tmp_int - 10000;
   609  005A  1283               	bcf	3,5	;RP0=0, select bank0
   610  005B  1303               	bcf	3,6	;RP1=0, select bank0
   611  005C  082A               	movf	fLCD_PrintNumber@tmp_int,w
   612  005D  3EF0               	addlw	240
   613  005E  00AA               	movwf	fLCD_PrintNumber@tmp_int
   614  005F  082B               	movf	fLCD_PrintNumber@tmp_int+1,w
   615  0060  1803               	skipnc
   616  0061  3E01               	addlw	1
   617  0062  3ED8               	addlw	216
   618  0063  00AB               	movwf	fLCD_PrintNumber@tmp_int+1
   619                           
   620                           ;chrono.c: 216: tmp_byte--;
   621  0064  3001               	movlw	1
   622  0065  02AC               	subwf	fLCD_PrintNumber@tmp_byte,f
   623  0066  2855               	goto	l1300
   624  0067                     l1302:	
   625                           
   626                           ;chrono.c: 217: }
   627                           ;chrono.c: 218: }
   628                           ;chrono.c: 220: if(Number >= 1000){
   629  0067  1283               	bcf	3,5	;RP0=0, select bank0
   630  0068  1303               	bcf	3,6	;RP1=0, select bank0
   631  0069  0829               	movf	fLCD_PrintNumber@Number+1,w
   632  006A  3A80               	xorlw	128
   633  006B  00FF               	movwf	127
   634  006C  3083               	movlw	131
   635  006D  027F               	subwf	127,w
   636  006E  1D03               	skipz
   637  006F  2872               	goto	u765
   638  0070  30E8               	movlw	232
   639  0071  0228               	subwf	fLCD_PrintNumber@Number,w
   640  0072                     u765:	
   641  0072  1C03               	skipc
   642  0073  28A4               	goto	l1310
   643                           
   644                           ;chrono.c: 221: tmp_byte = tmp_int/1000;
   645  0074  30E8               	movlw	232
   646  0075  1283               	bcf	3,5	;RP0=0, select bank0
   647  0076  1303               	bcf	3,6	;RP1=0, select bank0
   648  0077  00A0               	movwf	?___awdiv
   649  0078  3003               	movlw	3
   650  0079  00A1               	movwf	?___awdiv+1
   651  007A  082B               	movf	fLCD_PrintNumber@tmp_int+1,w
   652  007B  01A3               	clrf	?___awdiv+3
   653  007C  07A3               	addwf	?___awdiv+3,f
   654  007D  082A               	movf	fLCD_PrintNumber@tmp_int,w
   655  007E  01A2               	clrf	?___awdiv+2
   656  007F  07A2               	addwf	?___awdiv+2,f
   657  0080  118A  21F9  118A   	fcall	___awdiv
   658  0083  1283               	bcf	3,5	;RP0=0, select bank0
   659  0084  1303               	bcf	3,6	;RP1=0, select bank0
   660  0085  0820               	movf	?___awdiv,w
   661  0086  00F5               	movwf	??_fLCD_PrintNumber
   662  0087  0875               	movf	??_fLCD_PrintNumber,w
   663  0088  00AC               	movwf	fLCD_PrintNumber@tmp_byte
   664                           
   665                           ;chrono.c: 222: fLCD_RawSend('0' + tmp_byte, 0x10);
   666  0089  3010               	movlw	16
   667  008A  00F5               	movwf	??_fLCD_PrintNumber
   668  008B  0875               	movf	??_fLCD_PrintNumber,w
   669  008C  00F4               	movwf	?_fLCD_RawSend
   670  008D  082C               	movf	fLCD_PrintNumber@tmp_byte,w
   671  008E  3E30               	addlw	48
   672  008F  118A  2199  118A   	fcall	_fLCD_RawSend
   673  0092                     l1308:	
   674                           ;chrono.c: 224: while(tmp_byte > 0){
   675                           
   676  0092  1283               	bcf	3,5	;RP0=0, select bank0
   677  0093  1303               	bcf	3,6	;RP1=0, select bank0
   678  0094  08AC               	movf	fLCD_PrintNumber@tmp_byte,f
   679  0095  1903               	btfsc	3,2
   680  0096  28A4               	goto	l1310
   681                           
   682                           ;chrono.c: 225: tmp_int = tmp_int - 1000;
   683  0097  1283               	bcf	3,5	;RP0=0, select bank0
   684  0098  1303               	bcf	3,6	;RP1=0, select bank0
   685  0099  082A               	movf	fLCD_PrintNumber@tmp_int,w
   686  009A  3E18               	addlw	24
   687  009B  00AA               	movwf	fLCD_PrintNumber@tmp_int
   688  009C  082B               	movf	fLCD_PrintNumber@tmp_int+1,w
   689  009D  1803               	skipnc
   690  009E  3E01               	addlw	1
   691  009F  3EFC               	addlw	252
   692  00A0  00AB               	movwf	fLCD_PrintNumber@tmp_int+1
   693                           
   694                           ;chrono.c: 226: tmp_byte--;
   695  00A1  3001               	movlw	1
   696  00A2  02AC               	subwf	fLCD_PrintNumber@tmp_byte,f
   697  00A3  2892               	goto	l1308
   698  00A4                     l1310:	
   699                           
   700                           ;chrono.c: 227: }
   701                           ;chrono.c: 228: }
   702                           ;chrono.c: 230: if(Number >= 100){
   703  00A4  1283               	bcf	3,5	;RP0=0, select bank0
   704  00A5  1303               	bcf	3,6	;RP1=0, select bank0
   705  00A6  0829               	movf	fLCD_PrintNumber@Number+1,w
   706  00A7  3A80               	xorlw	128
   707  00A8  00FF               	movwf	127
   708  00A9  3080               	movlw	128
   709  00AA  027F               	subwf	127,w
   710  00AB  1D03               	skipz
   711  00AC  28AF               	goto	u785
   712  00AD  3064               	movlw	100
   713  00AE  0228               	subwf	fLCD_PrintNumber@Number,w
   714  00AF                     u785:	
   715  00AF  1C03               	skipc
   716  00B0  28E1               	goto	l1318
   717                           
   718                           ;chrono.c: 231: tmp_byte = tmp_int/100;
   719  00B1  3064               	movlw	100
   720  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   721  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   722  00B4  00A0               	movwf	?___awdiv
   723  00B5  3000               	movlw	0
   724  00B6  00A1               	movwf	?___awdiv+1
   725  00B7  082B               	movf	fLCD_PrintNumber@tmp_int+1,w
   726  00B8  01A3               	clrf	?___awdiv+3
   727  00B9  07A3               	addwf	?___awdiv+3,f
   728  00BA  082A               	movf	fLCD_PrintNumber@tmp_int,w
   729  00BB  01A2               	clrf	?___awdiv+2
   730  00BC  07A2               	addwf	?___awdiv+2,f
   731  00BD  118A  21F9  118A   	fcall	___awdiv
   732  00C0  1283               	bcf	3,5	;RP0=0, select bank0
   733  00C1  1303               	bcf	3,6	;RP1=0, select bank0
   734  00C2  0820               	movf	?___awdiv,w
   735  00C3  00F5               	movwf	??_fLCD_PrintNumber
   736  00C4  0875               	movf	??_fLCD_PrintNumber,w
   737  00C5  00AC               	movwf	fLCD_PrintNumber@tmp_byte
   738                           
   739                           ;chrono.c: 232: fLCD_RawSend('0' + tmp_byte, 0x10);
   740  00C6  3010               	movlw	16
   741  00C7  00F5               	movwf	??_fLCD_PrintNumber
   742  00C8  0875               	movf	??_fLCD_PrintNumber,w
   743  00C9  00F4               	movwf	?_fLCD_RawSend
   744  00CA  082C               	movf	fLCD_PrintNumber@tmp_byte,w
   745  00CB  3E30               	addlw	48
   746  00CC  118A  2199  118A   	fcall	_fLCD_RawSend
   747  00CF                     l1316:	
   748                           ;chrono.c: 234: while(tmp_byte > 0){
   749                           
   750  00CF  1283               	bcf	3,5	;RP0=0, select bank0
   751  00D0  1303               	bcf	3,6	;RP1=0, select bank0
   752  00D1  08AC               	movf	fLCD_PrintNumber@tmp_byte,f
   753  00D2  1903               	btfsc	3,2
   754  00D3  28E1               	goto	l1318
   755                           
   756                           ;chrono.c: 235: tmp_int = tmp_int - 100;
   757  00D4  1283               	bcf	3,5	;RP0=0, select bank0
   758  00D5  1303               	bcf	3,6	;RP1=0, select bank0
   759  00D6  082A               	movf	fLCD_PrintNumber@tmp_int,w
   760  00D7  3E9C               	addlw	156
   761  00D8  00AA               	movwf	fLCD_PrintNumber@tmp_int
   762  00D9  082B               	movf	fLCD_PrintNumber@tmp_int+1,w
   763  00DA  1803               	skipnc
   764  00DB  3E01               	addlw	1
   765  00DC  3EFF               	addlw	255
   766  00DD  00AB               	movwf	fLCD_PrintNumber@tmp_int+1
   767                           
   768                           ;chrono.c: 236: tmp_byte--;
   769  00DE  3001               	movlw	1
   770  00DF  02AC               	subwf	fLCD_PrintNumber@tmp_byte,f
   771  00E0  28CF               	goto	l1316
   772  00E1                     l1318:	
   773                           
   774                           ;chrono.c: 237: }
   775                           ;chrono.c: 238: }
   776                           ;chrono.c: 240: if(Number >= 10){
   777  00E1  1283               	bcf	3,5	;RP0=0, select bank0
   778  00E2  1303               	bcf	3,6	;RP1=0, select bank0
   779  00E3  0829               	movf	fLCD_PrintNumber@Number+1,w
   780  00E4  3A80               	xorlw	128
   781  00E5  00FF               	movwf	127
   782  00E6  3080               	movlw	128
   783  00E7  027F               	subwf	127,w
   784  00E8  1D03               	skipz
   785  00E9  28EC               	goto	u805
   786  00EA  300A               	movlw	10
   787  00EB  0228               	subwf	fLCD_PrintNumber@Number,w
   788  00EC                     u805:	
   789  00EC  1C03               	skipc
   790  00ED  291E               	goto	l1326
   791                           
   792                           ;chrono.c: 241: tmp_byte = tmp_int/10;
   793  00EE  300A               	movlw	10
   794  00EF  1283               	bcf	3,5	;RP0=0, select bank0
   795  00F0  1303               	bcf	3,6	;RP1=0, select bank0
   796  00F1  00A0               	movwf	?___awdiv
   797  00F2  3000               	movlw	0
   798  00F3  00A1               	movwf	?___awdiv+1
   799  00F4  082B               	movf	fLCD_PrintNumber@tmp_int+1,w
   800  00F5  01A3               	clrf	?___awdiv+3
   801  00F6  07A3               	addwf	?___awdiv+3,f
   802  00F7  082A               	movf	fLCD_PrintNumber@tmp_int,w
   803  00F8  01A2               	clrf	?___awdiv+2
   804  00F9  07A2               	addwf	?___awdiv+2,f
   805  00FA  118A  21F9  118A   	fcall	___awdiv
   806  00FD  1283               	bcf	3,5	;RP0=0, select bank0
   807  00FE  1303               	bcf	3,6	;RP1=0, select bank0
   808  00FF  0820               	movf	?___awdiv,w
   809  0100  00F5               	movwf	??_fLCD_PrintNumber
   810  0101  0875               	movf	??_fLCD_PrintNumber,w
   811  0102  00AC               	movwf	fLCD_PrintNumber@tmp_byte
   812                           
   813                           ;chrono.c: 242: fLCD_RawSend('0' + tmp_byte, 0x10);
   814  0103  3010               	movlw	16
   815  0104  00F5               	movwf	??_fLCD_PrintNumber
   816  0105  0875               	movf	??_fLCD_PrintNumber,w
   817  0106  00F4               	movwf	?_fLCD_RawSend
   818  0107  082C               	movf	fLCD_PrintNumber@tmp_byte,w
   819  0108  3E30               	addlw	48
   820  0109  118A  2199  118A   	fcall	_fLCD_RawSend
   821  010C                     l1324:	
   822                           ;chrono.c: 244: while(tmp_byte > 0){
   823                           
   824  010C  1283               	bcf	3,5	;RP0=0, select bank0
   825  010D  1303               	bcf	3,6	;RP1=0, select bank0
   826  010E  08AC               	movf	fLCD_PrintNumber@tmp_byte,f
   827  010F  1903               	btfsc	3,2
   828  0110  291E               	goto	l1326
   829                           
   830                           ;chrono.c: 245: tmp_int = tmp_int - 10;
   831  0111  1283               	bcf	3,5	;RP0=0, select bank0
   832  0112  1303               	bcf	3,6	;RP1=0, select bank0
   833  0113  082A               	movf	fLCD_PrintNumber@tmp_int,w
   834  0114  3EF6               	addlw	246
   835  0115  00AA               	movwf	fLCD_PrintNumber@tmp_int
   836  0116  082B               	movf	fLCD_PrintNumber@tmp_int+1,w
   837  0117  1803               	skipnc
   838  0118  3E01               	addlw	1
   839  0119  3EFF               	addlw	255
   840  011A  00AB               	movwf	fLCD_PrintNumber@tmp_int+1
   841                           
   842                           ;chrono.c: 246: tmp_byte--;
   843  011B  3001               	movlw	1
   844  011C  02AC               	subwf	fLCD_PrintNumber@tmp_byte,f
   845  011D  290C               	goto	l1324
   846  011E                     l1326:	
   847                           
   848                           ;chrono.c: 247: }
   849                           ;chrono.c: 248: }
   850                           ;chrono.c: 249: fLCD_RawSend('0' + tmp_int, 0x10);
   851  011E  3010               	movlw	16
   852  011F  00F5               	movwf	??_fLCD_PrintNumber
   853  0120  0875               	movf	??_fLCD_PrintNumber,w
   854  0121  00F4               	movwf	?_fLCD_RawSend
   855  0122  1283               	bcf	3,5	;RP0=0, select bank0
   856  0123  1303               	bcf	3,6	;RP1=0, select bank0
   857  0124  082A               	movf	fLCD_PrintNumber@tmp_int,w
   858  0125  3E30               	addlw	48
   859  0126  118A  2199         	fcall	_fLCD_RawSend
   860  0128  0008               	return
   861  0129                     __end_of_fLCD_PrintNumber:	
   862                           
   863                           	psect	text3
   864  01F9                     __ptext3:	
   865 ;; *************** function ___awdiv *****************
   866 ;; Defined at:
   867 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awdiv.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;  divisor         2    0[BANK0 ] int 
   870 ;;  dividend        2    2[BANK0 ] int 
   871 ;; Auto vars:     Size  Location     Type
   872 ;;  quotient        2    6[BANK0 ] int 
   873 ;;  sign            1    5[BANK0 ] unsigned char 
   874 ;;  counter         1    4[BANK0 ] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  2    0[BANK0 ] int 
   877 ;; Registers used:
   878 ;;		wreg, status,2, status,0
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         0       4       0       0       0
   885 ;;      Locals:         0       4       0       0       0
   886 ;;      Temps:          1       0       0       0       0
   887 ;;      Totals:         1       8       0       0       0
   888 ;;Total ram usage:        9 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:    1
   891 ;; This function calls:
   892 ;;		Nothing
   893 ;; This function is called by:
   894 ;;		_fLCD_PrintNumber
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           
   899                           ;psect for function ___awdiv
   900  01F9                     ___awdiv:	
   901                           
   902                           ;incstack = 0
   903                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   904  01F9  1283               	bcf	3,5	;RP0=0, select bank0
   905  01FA  1303               	bcf	3,6	;RP1=0, select bank0
   906  01FB  01A5               	clrf	___awdiv@sign
   907  01FC  1FA1               	btfss	___awdiv@divisor+1,7
   908  01FD  2A05               	goto	l1464
   909  01FE  09A0               	comf	___awdiv@divisor,f
   910  01FF  09A1               	comf	___awdiv@divisor+1,f
   911  0200  0AA0               	incf	___awdiv@divisor,f
   912  0201  1903               	skipnz
   913  0202  0AA1               	incf	___awdiv@divisor+1,f
   914  0203  01A5               	clrf	___awdiv@sign
   915  0204  0AA5               	incf	___awdiv@sign,f
   916  0205                     l1464:	
   917  0205  1FA3               	btfss	___awdiv@dividend+1,7
   918  0206  2A10               	goto	l1470
   919  0207  09A2               	comf	___awdiv@dividend,f
   920  0208  09A3               	comf	___awdiv@dividend+1,f
   921  0209  0AA2               	incf	___awdiv@dividend,f
   922  020A  1903               	skipnz
   923  020B  0AA3               	incf	___awdiv@dividend+1,f
   924  020C  3001               	movlw	1
   925  020D  00F4               	movwf	??___awdiv
   926  020E  0874               	movf	??___awdiv,w
   927  020F  06A5               	xorwf	___awdiv@sign,f
   928  0210                     l1470:	
   929  0210  01A6               	clrf	___awdiv@quotient
   930  0211  01A7               	clrf	___awdiv@quotient+1
   931  0212  0821               	movf	___awdiv@divisor+1,w
   932  0213  0420               	iorwf	___awdiv@divisor,w
   933  0214  1903               	skipnz
   934  0215  2A47               	goto	l1492
   935  0216  01A4               	clrf	___awdiv@counter
   936  0217  0AA4               	incf	___awdiv@counter,f
   937  0218                     l1480:	
   938  0218  1BA1               	btfsc	___awdiv@divisor+1,7
   939  0219  2A26               	goto	l1482
   940  021A  3001               	movlw	1
   941  021B                     u1025:	
   942  021B  1003               	clrc
   943  021C  0DA0               	rlf	___awdiv@divisor,f
   944  021D  0DA1               	rlf	___awdiv@divisor+1,f
   945  021E  3EFF               	addlw	-1
   946  021F  1D03               	skipz
   947  0220  2A1B               	goto	u1025
   948  0221  3001               	movlw	1
   949  0222  00F4               	movwf	??___awdiv
   950  0223  0874               	movf	??___awdiv,w
   951  0224  07A4               	addwf	___awdiv@counter,f
   952  0225  2A18               	goto	l1480
   953  0226                     l1482:	
   954  0226  3001               	movlw	1
   955  0227                     u1045:	
   956  0227  1003               	clrc
   957  0228  0DA6               	rlf	___awdiv@quotient,f
   958  0229  0DA7               	rlf	___awdiv@quotient+1,f
   959  022A  3EFF               	addlw	-1
   960  022B  1D03               	skipz
   961  022C  2A27               	goto	u1045
   962  022D  0821               	movf	___awdiv@divisor+1,w
   963  022E  0223               	subwf	___awdiv@dividend+1,w
   964  022F  1D03               	skipz
   965  0230  2A33               	goto	u1055
   966  0231  0820               	movf	___awdiv@divisor,w
   967  0232  0222               	subwf	___awdiv@dividend,w
   968  0233                     u1055:	
   969  0233  1C03               	skipc
   970  0234  2A3C               	goto	l1488
   971  0235  0820               	movf	___awdiv@divisor,w
   972  0236  02A2               	subwf	___awdiv@dividend,f
   973  0237  0821               	movf	___awdiv@divisor+1,w
   974  0238  1C03               	skipc
   975  0239  03A3               	decf	___awdiv@dividend+1,f
   976  023A  02A3               	subwf	___awdiv@dividend+1,f
   977  023B  1426               	bsf	___awdiv@quotient,0
   978  023C                     l1488:	
   979  023C  3001               	movlw	1
   980  023D                     u1065:	
   981  023D  1003               	clrc
   982  023E  0CA1               	rrf	___awdiv@divisor+1,f
   983  023F  0CA0               	rrf	___awdiv@divisor,f
   984  0240  3EFF               	addlw	-1
   985  0241  1D03               	skipz
   986  0242  2A3D               	goto	u1065
   987  0243  3001               	movlw	1
   988  0244  02A4               	subwf	___awdiv@counter,f
   989  0245  1D03               	btfss	3,2
   990  0246  2A26               	goto	l1482
   991  0247                     l1492:	
   992  0247  0825               	movf	___awdiv@sign,w
   993  0248  1903               	btfsc	3,2
   994  0249  2A4F               	goto	l1496
   995  024A  09A6               	comf	___awdiv@quotient,f
   996  024B  09A7               	comf	___awdiv@quotient+1,f
   997  024C  0AA6               	incf	___awdiv@quotient,f
   998  024D  1903               	skipnz
   999  024E  0AA7               	incf	___awdiv@quotient+1,f
  1000  024F                     l1496:	
  1001  024F  0827               	movf	___awdiv@quotient+1,w
  1002  0250  01A1               	clrf	?___awdiv+1
  1003  0251  07A1               	addwf	?___awdiv+1,f
  1004  0252  0826               	movf	___awdiv@quotient,w
  1005  0253  01A0               	clrf	?___awdiv
  1006  0254  07A0               	addwf	?___awdiv,f
  1007  0255  0008               	return
  1008  0256                     __end_of___awdiv:	
  1009                           
  1010                           	psect	text4
  1011  0129                     __ptext4:	
  1012 ;; *************** function _fLCD_Start *****************
  1013 ;; Defined at:
  1014 ;;		line 83 in file "chrono.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;		None
  1019 ;; Return value:  Size  Location     Type
  1020 ;;		None               void
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0, pclath, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1028 ;;      Params:         0       0       0       0       0
  1029 ;;      Locals:         0       0       0       0       0
  1030 ;;      Temps:          0       2       0       0       0
  1031 ;;      Totals:         0       2       0       0       0
  1032 ;;Total ram usage:        2 bytes
  1033 ;; Hardware stack levels used:    1
  1034 ;; Hardware stack levels required when called:    3
  1035 ;; This function calls:
  1036 ;;		_fLCD_RawSend
  1037 ;;		_fLCD_Clear
  1038 ;; This function is called by:
  1039 ;;		_main
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           
  1044                           ;psect for function _fLCD_Start
  1045  0129                     _fLCD_Start:	
  1046                           
  1047                           ;chrono.c: 84: PORTB = 0;
  1048                           
  1049                           ;incstack = 0
  1050                           ; Regs used in _fLCD_Start: [wreg+status,2+status,0+pclath+cstack]
  1051  0129  1283               	bcf	3,5	;RP0=0, select bank0
  1052  012A  1303               	bcf	3,6	;RP1=0, select bank0
  1053  012B  0186               	clrf	6	;volatile
  1054                           
  1055                           ;chrono.c: 85: PORTA = 0;
  1056  012C  0185               	clrf	5	;volatile
  1057                           
  1058                           ;chrono.c: 86: _delay((unsigned long)((12)*(8000000/4000.0)));
  1059  012D  3020               	movlw	32
  1060  012E  00A7               	movwf	??_fLCD_Start+1
  1061  012F  3029               	movlw	41
  1062  0130  00A6               	movwf	??_fLCD_Start
  1063  0131                     u1117:	
  1064  0131  0BA6               	decfsz	??_fLCD_Start,f
  1065  0132  2931               	goto	u1117
  1066  0133  0BA7               	decfsz	??_fLCD_Start+1,f
  1067  0134  2931               	goto	u1117
  1068  0135  2936               	nop2
  1069                           
  1070                           ;chrono.c: 87: fLCD_RawSend(0x33, 0);
  1071  0136  01F4               	clrf	?_fLCD_RawSend
  1072  0137  3033               	movlw	51
  1073  0138  118A  2199  118A   	fcall	_fLCD_RawSend
  1074                           
  1075                           ;chrono.c: 88: _delay((unsigned long)((2)*(8000000/4000.0)));
  1076  013B  3006               	movlw	6
  1077  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1078  013D  1303               	bcf	3,6	;RP1=0, select bank0
  1079  013E  00A7               	movwf	??_fLCD_Start+1
  1080  013F  3030               	movlw	48
  1081  0140  00A6               	movwf	??_fLCD_Start
  1082  0141                     u1127:	
  1083  0141  0BA6               	decfsz	??_fLCD_Start,f
  1084  0142  2941               	goto	u1127
  1085  0143  0BA7               	decfsz	??_fLCD_Start+1,f
  1086  0144  2941               	goto	u1127
  1087  0145  0000               	nop
  1088                           
  1089                           ;chrono.c: 89: fLCD_RawSend(0x33, 0);
  1090  0146  01F4               	clrf	?_fLCD_RawSend
  1091  0147  3033               	movlw	51
  1092  0148  118A  2199  118A   	fcall	_fLCD_RawSend
  1093                           
  1094                           ;chrono.c: 90: _delay((unsigned long)((2)*(8000000/4000.0)));
  1095  014B  3006               	movlw	6
  1096  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1097  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1098  014E  00A7               	movwf	??_fLCD_Start+1
  1099  014F  3030               	movlw	48
  1100  0150  00A6               	movwf	??_fLCD_Start
  1101  0151                     u1137:	
  1102  0151  0BA6               	decfsz	??_fLCD_Start,f
  1103  0152  2951               	goto	u1137
  1104  0153  0BA7               	decfsz	??_fLCD_Start+1,f
  1105  0154  2951               	goto	u1137
  1106  0155  0000               	nop
  1107                           
  1108                           ;chrono.c: 91: fLCD_RawSend(0x32, 0);
  1109  0156  01F4               	clrf	?_fLCD_RawSend
  1110  0157  3032               	movlw	50
  1111  0158  118A  2199  118A   	fcall	_fLCD_RawSend
  1112                           
  1113                           ;chrono.c: 92: _delay((unsigned long)((2)*(8000000/4000.0)));
  1114  015B  3006               	movlw	6
  1115  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1116  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1117  015E  00A7               	movwf	??_fLCD_Start+1
  1118  015F  3030               	movlw	48
  1119  0160  00A6               	movwf	??_fLCD_Start
  1120  0161                     u1147:	
  1121  0161  0BA6               	decfsz	??_fLCD_Start,f
  1122  0162  2961               	goto	u1147
  1123  0163  0BA7               	decfsz	??_fLCD_Start+1,f
  1124  0164  2961               	goto	u1147
  1125  0165  0000               	nop
  1126                           
  1127                           ;chrono.c: 93: fLCD_RawSend(0x2c, 0);
  1128  0166  01F4               	clrf	?_fLCD_RawSend
  1129  0167  302C               	movlw	44
  1130  0168  118A  2199  118A   	fcall	_fLCD_RawSend
  1131                           
  1132                           ;chrono.c: 94: _delay((unsigned long)((2)*(8000000/4000.0)));
  1133  016B  3006               	movlw	6
  1134  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1135  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1136  016E  00A7               	movwf	??_fLCD_Start+1
  1137  016F  3030               	movlw	48
  1138  0170  00A6               	movwf	??_fLCD_Start
  1139  0171                     u1157:	
  1140  0171  0BA6               	decfsz	??_fLCD_Start,f
  1141  0172  2971               	goto	u1157
  1142  0173  0BA7               	decfsz	??_fLCD_Start+1,f
  1143  0174  2971               	goto	u1157
  1144  0175  0000               	nop
  1145                           
  1146                           ;chrono.c: 95: fLCD_RawSend(0x06, 0);
  1147  0176  01F4               	clrf	?_fLCD_RawSend
  1148  0177  3006               	movlw	6
  1149  0178  118A  2199  118A   	fcall	_fLCD_RawSend
  1150                           
  1151                           ;chrono.c: 96: _delay((unsigned long)((2)*(8000000/4000.0)));
  1152  017B  3006               	movlw	6
  1153  017C  1283               	bcf	3,5	;RP0=0, select bank0
  1154  017D  1303               	bcf	3,6	;RP1=0, select bank0
  1155  017E  00A7               	movwf	??_fLCD_Start+1
  1156  017F  3030               	movlw	48
  1157  0180  00A6               	movwf	??_fLCD_Start
  1158  0181                     u1167:	
  1159  0181  0BA6               	decfsz	??_fLCD_Start,f
  1160  0182  2981               	goto	u1167
  1161  0183  0BA7               	decfsz	??_fLCD_Start+1,f
  1162  0184  2981               	goto	u1167
  1163  0185  0000               	nop
  1164                           
  1165                           ;chrono.c: 97: fLCD_RawSend(0x0c, 0);
  1166  0186  01F4               	clrf	?_fLCD_RawSend
  1167  0187  300C               	movlw	12
  1168  0188  118A  2199  118A   	fcall	_fLCD_RawSend
  1169                           
  1170                           ;chrono.c: 98: _delay((unsigned long)((2)*(8000000/4000.0)));
  1171  018B  3006               	movlw	6
  1172  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1173  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1174  018E  00A7               	movwf	??_fLCD_Start+1
  1175  018F  3030               	movlw	48
  1176  0190  00A6               	movwf	??_fLCD_Start
  1177  0191                     u1177:	
  1178  0191  0BA6               	decfsz	??_fLCD_Start,f
  1179  0192  2991               	goto	u1177
  1180  0193  0BA7               	decfsz	??_fLCD_Start+1,f
  1181  0194  2991               	goto	u1177
  1182  0195  0000               	nop
  1183                           
  1184                           ;chrono.c: 100: fLCD_Clear();
  1185  0196  118A  22B6         	fcall	_fLCD_Clear
  1186  0198  0008               	return
  1187  0199                     __end_of_fLCD_Start:	
  1188                           
  1189                           	psect	text5
  1190  02B6                     __ptext5:	
  1191 ;; *************** function _fLCD_Clear *****************
  1192 ;; Defined at:
  1193 ;;		line 147 in file "chrono.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;		None
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;		None
  1198 ;; Return value:  Size  Location     Type
  1199 ;;		None               void
  1200 ;; Registers used:
  1201 ;;		wreg, status,2, status,0, pclath, cstack
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1207 ;;      Params:         0       0       0       0       0
  1208 ;;      Locals:         0       0       0       0       0
  1209 ;;      Temps:          0       2       0       0       0
  1210 ;;      Totals:         0       2       0       0       0
  1211 ;;Total ram usage:        2 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; Hardware stack levels required when called:    2
  1214 ;; This function calls:
  1215 ;;		_fLCD_RawSend
  1216 ;; This function is called by:
  1217 ;;		_fLCD_Start
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           
  1222                           ;psect for function _fLCD_Clear
  1223  02B6                     _fLCD_Clear:	
  1224                           
  1225                           ;chrono.c: 149: fLCD_RawSend(0x01, 0);
  1226                           
  1227                           ;incstack = 0
  1228                           ; Regs used in _fLCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1229  02B6  01F4               	clrf	?_fLCD_RawSend
  1230  02B7  3001               	movlw	1
  1231  02B8  118A  2199  118A   	fcall	_fLCD_RawSend
  1232                           
  1233                           ;chrono.c: 150: _delay((unsigned long)((2)*(8000000/4000.0)));
  1234  02BB  3006               	movlw	6
  1235  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  1236  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  1237  02BE  00A5               	movwf	??_fLCD_Clear+1
  1238  02BF  3030               	movlw	48
  1239  02C0  00A4               	movwf	??_fLCD_Clear
  1240  02C1                     u1187:	
  1241  02C1  0BA4               	decfsz	??_fLCD_Clear,f
  1242  02C2  2AC1               	goto	u1187
  1243  02C3  0BA5               	decfsz	??_fLCD_Clear+1,f
  1244  02C4  2AC1               	goto	u1187
  1245  02C5  0000               	nop
  1246                           
  1247                           ;chrono.c: 151: fLCD_RawSend(0x02, 0);
  1248  02C6  01F4               	clrf	?_fLCD_RawSend
  1249  02C7  3002               	movlw	2
  1250  02C8  118A  2199  118A   	fcall	_fLCD_RawSend
  1251                           
  1252                           ;chrono.c: 152: _delay((unsigned long)((2)*(8000000/4000.0)));
  1253  02CB  3006               	movlw	6
  1254  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  1255  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  1256  02CE  00A5               	movwf	??_fLCD_Clear+1
  1257  02CF  3030               	movlw	48
  1258  02D0  00A4               	movwf	??_fLCD_Clear
  1259  02D1                     u1197:	
  1260  02D1  0BA4               	decfsz	??_fLCD_Clear,f
  1261  02D2  2AD1               	goto	u1197
  1262  02D3  0BA5               	decfsz	??_fLCD_Clear+1,f
  1263  02D4  2AD1               	goto	u1197
  1264  02D5  0000               	nop
  1265  02D6  0008               	return
  1266  02D7                     __end_of_fLCD_Clear:	
  1267                           
  1268                           	psect	text6
  1269  0199                     __ptext6:	
  1270 ;; *************** function _fLCD_RawSend *****************
  1271 ;; Defined at:
  1272 ;;		line 103 in file "chrono.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;  in              1    wreg     unsigned char 
  1275 ;;  mask            1    4[COMMON] unsigned char 
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  in              1    2[BANK0 ] unsigned char 
  1278 ;;  pt              1    3[BANK0 ] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;		None               void
  1281 ;; Registers used:
  1282 ;;		wreg, status,2, status,0
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1288 ;;      Params:         1       0       0       0       0
  1289 ;;      Locals:         0       2       0       0       0
  1290 ;;      Temps:          0       2       0       0       0
  1291 ;;      Totals:         1       4       0       0       0
  1292 ;;Total ram usage:        5 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; Hardware stack levels required when called:    1
  1295 ;; This function calls:
  1296 ;;		Nothing
  1297 ;; This function is called by:
  1298 ;;		_fLCD_Start
  1299 ;;		_fLCD_Clear
  1300 ;;		_fLCD_PrintNumber
  1301 ;;		_fLCD_PrintString
  1302 ;;		_fLCD_PrintASCII
  1303 ;;		_fLCD_Command
  1304 ;;		_fLCD_Cursor
  1305 ;;		_fLCD_ClearLine
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function _fLCD_RawSend
  1311  0199                     _fLCD_RawSend:	
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in _fLCD_RawSend: [wreg+status,2+status,0]
  1315                           ;fLCD_RawSend@in stored from wreg
  1316  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1317  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1318  019B  00A2               	movwf	fLCD_RawSend@in
  1319                           
  1320                           ;chrono.c: 104: unsigned char pt;
  1321                           ;chrono.c: 105: PORTB = 0;
  1322  019C  0186               	clrf	6	;volatile
  1323                           
  1324                           ;chrono.c: 106: PORTA = 0;
  1325  019D  0185               	clrf	5	;volatile
  1326                           
  1327                           ;chrono.c: 107: pt = ((in >> 4) & 0x0f);
  1328  019E  0822               	movf	fLCD_RawSend@in,w
  1329  019F  00A0               	movwf	??_fLCD_RawSend
  1330  01A0  3004               	movlw	4
  1331  01A1                     u845:	
  1332  01A1  1003               	clrc
  1333  01A2  0CA0               	rrf	??_fLCD_RawSend,f
  1334  01A3  3EFF               	addlw	-1
  1335  01A4  1D03               	skipz
  1336  01A5  29A1               	goto	u845
  1337  01A6  0820               	movf	??_fLCD_RawSend,w
  1338  01A7  390F               	andlw	15
  1339  01A8  00A1               	movwf	??_fLCD_RawSend+1
  1340  01A9  0821               	movf	??_fLCD_RawSend+1,w
  1341  01AA  00A3               	movwf	fLCD_RawSend@pt
  1342                           
  1343                           ;chrono.c: 108: if(pt & 0x01)
  1344  01AB  1823               	btfsc	fLCD_RawSend@pt,0
  1345                           
  1346                           ;chrono.c: 109: PORTBbits.RB0 = 1;
  1347  01AC  1406               	bsf	6,0	;volatile
  1348                           
  1349                           ;chrono.c: 110: if(pt & 0x02)
  1350  01AD  18A3               	btfsc	fLCD_RawSend@pt,1
  1351                           
  1352                           ;chrono.c: 111: PORTBbits.RB1 = 1;
  1353  01AE  1486               	bsf	6,1	;volatile
  1354                           
  1355                           ;chrono.c: 112: if(pt & 0x04)
  1356  01AF  1923               	btfsc	fLCD_RawSend@pt,2
  1357                           
  1358                           ;chrono.c: 113: PORTBbits.RB2 = 1;
  1359  01B0  1506               	bsf	6,2	;volatile
  1360                           
  1361                           ;chrono.c: 114: if(pt & 0x08)
  1362  01B1  19A3               	btfsc	fLCD_RawSend@pt,3
  1363                           
  1364                           ;chrono.c: 115: PORTBbits.RB3 = 1;
  1365  01B2  1586               	bsf	6,3	;volatile
  1366                           
  1367                           ;chrono.c: 116: if(mask)
  1368  01B3  0874               	movf	fLCD_RawSend@mask,w
  1369  01B4  1D03               	skipz
  1370                           
  1371                           ;chrono.c: 117: PORTBbits.RB4 = 1;
  1372  01B5  1606               	bsf	6,4	;volatile
  1373                           
  1374                           ;chrono.c: 118: _delay((unsigned long)((120)*(8000000/4000000.0)));
  1375  01B6  304F               	movlw	79
  1376  01B7  00A0               	movwf	??_fLCD_RawSend
  1377  01B8                     u1207:	
  1378  01B8  0BA0               	decfsz	??_fLCD_RawSend,f
  1379  01B9  29B8               	goto	u1207
  1380  01BA  29BB               	nop2	;nop
  1381                           
  1382                           ;chrono.c: 119: PORTBbits.RB5 = 1;
  1383  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1384  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1385  01BD  1686               	bsf	6,5	;volatile
  1386                           
  1387                           ;chrono.c: 120: _delay((unsigned long)((120)*(8000000/4000000.0)));
  1388  01BE  304F               	movlw	79
  1389  01BF  00A0               	movwf	??_fLCD_RawSend
  1390  01C0                     u1217:	
  1391  01C0  0BA0               	decfsz	??_fLCD_RawSend,f
  1392  01C1  29C0               	goto	u1217
  1393  01C2  29C3               	nop2	;nop
  1394                           
  1395                           ;chrono.c: 121: PORTBbits.RB5 = 0;
  1396  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1397  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1398  01C5  1286               	bcf	6,5	;volatile
  1399                           
  1400                           ;chrono.c: 122: pt = (in & 0x0f);
  1401  01C6  0822               	movf	fLCD_RawSend@in,w
  1402  01C7  390F               	andlw	15
  1403  01C8  00A0               	movwf	??_fLCD_RawSend
  1404  01C9  0820               	movf	??_fLCD_RawSend,w
  1405  01CA  00A3               	movwf	fLCD_RawSend@pt
  1406                           
  1407                           ;chrono.c: 123: _delay((unsigned long)((120)*(8000000/4000000.0)));
  1408  01CB  304F               	movlw	79
  1409  01CC  00A0               	movwf	??_fLCD_RawSend
  1410  01CD                     u1227:	
  1411  01CD  0BA0               	decfsz	??_fLCD_RawSend,f
  1412  01CE  29CD               	goto	u1227
  1413  01CF  29D0               	nop2	;nop
  1414                           
  1415                           ;chrono.c: 124: PORTBbits.RB0 = 0;
  1416  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1417  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1418  01D2  1006               	bcf	6,0	;volatile
  1419                           
  1420                           ;chrono.c: 125: PORTBbits.RB1 = 0;
  1421  01D3  1086               	bcf	6,1	;volatile
  1422                           
  1423                           ;chrono.c: 126: PORTBbits.RB2 = 0;
  1424  01D4  1106               	bcf	6,2	;volatile
  1425                           
  1426                           ;chrono.c: 127: PORTBbits.RB3 = 0;
  1427  01D5  1186               	bcf	6,3	;volatile
  1428                           
  1429                           ;chrono.c: 128: PORTBbits.RB4 = 0;
  1430  01D6  1206               	bcf	6,4	;volatile
  1431                           
  1432                           ;chrono.c: 129: PORTBbits.RB5 = 0;
  1433  01D7  1286               	bcf	6,5	;volatile
  1434                           
  1435                           ;chrono.c: 130: if(pt & 0x01)
  1436  01D8  1823               	btfsc	fLCD_RawSend@pt,0
  1437                           
  1438                           ;chrono.c: 131: PORTBbits.RB0 = 1;
  1439  01D9  1406               	bsf	6,0	;volatile
  1440                           
  1441                           ;chrono.c: 132: if(pt & 0x02)
  1442  01DA  18A3               	btfsc	fLCD_RawSend@pt,1
  1443                           
  1444                           ;chrono.c: 133: PORTBbits.RB1 = 1;
  1445  01DB  1486               	bsf	6,1	;volatile
  1446                           
  1447                           ;chrono.c: 134: if(pt & 0x04)
  1448  01DC  1923               	btfsc	fLCD_RawSend@pt,2
  1449                           
  1450                           ;chrono.c: 135: PORTBbits.RB2 = 1;
  1451  01DD  1506               	bsf	6,2	;volatile
  1452                           
  1453                           ;chrono.c: 136: if(pt & 0x08)
  1454  01DE  19A3               	btfsc	fLCD_RawSend@pt,3
  1455                           
  1456                           ;chrono.c: 137: PORTBbits.RB3 = 1;
  1457  01DF  1586               	bsf	6,3	;volatile
  1458                           
  1459                           ;chrono.c: 138: if(mask)
  1460  01E0  0874               	movf	fLCD_RawSend@mask,w
  1461  01E1  1D03               	skipz
  1462                           
  1463                           ;chrono.c: 139: PORTBbits.RB4 = 1;
  1464  01E2  1606               	bsf	6,4	;volatile
  1465                           
  1466                           ;chrono.c: 140: _delay((unsigned long)((120)*(8000000/4000000.0)));
  1467  01E3  304F               	movlw	79
  1468  01E4  00A0               	movwf	??_fLCD_RawSend
  1469  01E5                     u1237:	
  1470  01E5  0BA0               	decfsz	??_fLCD_RawSend,f
  1471  01E6  29E5               	goto	u1237
  1472  01E7  29E8               	nop2	;nop
  1473                           
  1474                           ;chrono.c: 141: PORTBbits.RB5 = 1;
  1475  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1476  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1477  01EA  1686               	bsf	6,5	;volatile
  1478                           
  1479                           ;chrono.c: 142: _delay((unsigned long)((120)*(8000000/4000000.0)));
  1480  01EB  304F               	movlw	79
  1481  01EC  00A0               	movwf	??_fLCD_RawSend
  1482  01ED                     u1247:	
  1483  01ED  0BA0               	decfsz	??_fLCD_RawSend,f
  1484  01EE  29ED               	goto	u1247
  1485  01EF  29F0               	nop2	;nop
  1486                           
  1487                           ;chrono.c: 143: PORTBbits.RB5 = 0;
  1488  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1489  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1490  01F2  1286               	bcf	6,5	;volatile
  1491                           
  1492                           ;chrono.c: 144: _delay((unsigned long)((120)*(8000000/4000000.0)));
  1493  01F3  304F               	movlw	79
  1494  01F4  00A0               	movwf	??_fLCD_RawSend
  1495  01F5                     u1257:	
  1496  01F5  0BA0               	decfsz	??_fLCD_RawSend,f
  1497  01F6  29F5               	goto	u1257
  1498  01F7  29F8               	nop2	;nop
  1499  01F8  0008               	return
  1500  01F9                     __end_of_fLCD_RawSend:	
  1501                           
  1502                           	psect	text7
  1503  02D7                     __ptext7:	
  1504 ;; *************** function _startUp *****************
  1505 ;; Defined at:
  1506 ;;		line 314 in file "chrono.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;		None
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;		None               void
  1513 ;; Registers used:
  1514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1520 ;;      Params:         0       0       0       0       0
  1521 ;;      Locals:         0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0
  1523 ;;      Totals:         0       0       0       0       0
  1524 ;;Total ram usage:        0 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    2
  1527 ;; This function calls:
  1528 ;;		_initializeInt
  1529 ;;		_initializeTimer0
  1530 ;;		_initializeTimer1
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           
  1537                           ;psect for function _startUp
  1538  02D7                     _startUp:	
  1539                           
  1540                           ;chrono.c: 315: OSCCON = 0x70;
  1541                           
  1542                           ;incstack = 0
  1543                           ; Regs used in _startUp: [allreg]
  1544  02D7  3070               	movlw	112
  1545  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  1546  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  1547  02DA  008F               	movwf	15	;volatile
  1548                           
  1549                           ;chrono.c: 317: ANSEL = 0;
  1550  02DB  019B               	clrf	27	;volatile
  1551                           
  1552                           ;chrono.c: 318: CMCON = 0x07;
  1553  02DC  3007               	movlw	7
  1554  02DD  009C               	movwf	28	;volatile
  1555                           
  1556                           ;chrono.c: 320: OPTION_REG = 0xc0;
  1557  02DE  30C0               	movlw	192
  1558  02DF  0081               	movwf	1	;volatile
  1559                           
  1560                           ;chrono.c: 322: TRISB = 0b00000000;
  1561  02E0  0186               	clrf	6	;volatile
  1562                           
  1563                           ;chrono.c: 323: TRISA = 0b00000000;
  1564  02E1  0185               	clrf	5	;volatile
  1565                           
  1566                           ;chrono.c: 324: PORTB = 0;
  1567  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  1568  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  1569  02E4  0186               	clrf	6	;volatile
  1570                           
  1571                           ;chrono.c: 325: PORTA = 0;
  1572  02E5  0185               	clrf	5	;volatile
  1573                           
  1574                           ;chrono.c: 327: initializeInt();
  1575  02E6  118A  22EF  118A   	fcall	_initializeInt
  1576                           
  1577                           ;chrono.c: 328: initializeTimer0();
  1578  02E9  118A  2311  118A   	fcall	_initializeTimer0
  1579                           
  1580                           ;chrono.c: 329: initializeTimer1();
  1581  02EC  118A  231A         	fcall	_initializeTimer1
  1582  02EE  0008               	return
  1583  02EF                     __end_of_startUp:	
  1584                           
  1585                           	psect	text8
  1586  031A                     __ptext8:	
  1587 ;; *************** function _initializeTimer1 *****************
  1588 ;; Defined at:
  1589 ;;		line 368 in file "chrono.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;		None               void
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1603 ;;      Params:         0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0
  1606 ;;      Totals:         0       0       0       0       0
  1607 ;;Total ram usage:        0 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    1
  1610 ;; This function calls:
  1611 ;;		Nothing
  1612 ;; This function is called by:
  1613 ;;		_startUp
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           
  1618                           ;psect for function _initializeTimer1
  1619  031A                     _initializeTimer1:	
  1620                           
  1621                           ;chrono.c: 369: T1CONbits.T1CKPS = 0b00;
  1622                           
  1623                           ;incstack = 0
  1624                           ; Regs used in _initializeTimer1: [wreg+status,2+status,0]
  1625  031A  30CF               	movlw	-49
  1626  031B  1283               	bcf	3,5	;RP0=0, select bank0
  1627  031C  1303               	bcf	3,6	;RP1=0, select bank0
  1628  031D  0590               	andwf	16,f	;volatile
  1629                           
  1630                           ;chrono.c: 370: T1CONbits.T1OSCEN = 1;
  1631  031E  1590               	bsf	16,3	;volatile
  1632                           
  1633                           ;chrono.c: 371: T1CONbits.TMR1CS = 0;
  1634  031F  1090               	bcf	16,1	;volatile
  1635                           
  1636                           ;chrono.c: 372: T1CONbits.TMR1ON = 1;
  1637  0320  1410               	bsf	16,0	;volatile
  1638  0321  0008               	return
  1639  0322                     __end_of_initializeTimer1:	
  1640                           
  1641                           	psect	text9
  1642  0311                     __ptext9:	
  1643 ;; *************** function _initializeTimer0 *****************
  1644 ;; Defined at:
  1645 ;;		line 376 in file "chrono.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;		None
  1650 ;; Return value:  Size  Location     Type
  1651 ;;		None               void
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1659 ;;      Params:         0       0       0       0       0
  1660 ;;      Locals:         0       0       0       0       0
  1661 ;;      Temps:          0       0       0       0       0
  1662 ;;      Totals:         0       0       0       0       0
  1663 ;;Total ram usage:        0 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; Hardware stack levels required when called:    1
  1666 ;; This function calls:
  1667 ;;		Nothing
  1668 ;; This function is called by:
  1669 ;;		_startUp
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           
  1674                           ;psect for function _initializeTimer0
  1675  0311                     _initializeTimer0:	
  1676                           
  1677                           ;chrono.c: 377: OPTION_REGbits.T0CS = 0;
  1678                           
  1679                           ;incstack = 0
  1680                           ; Regs used in _initializeTimer0: [wreg+status,2+status,0]
  1681  0311  1683               	bsf	3,5	;RP0=1, select bank1
  1682  0312  1303               	bcf	3,6	;RP1=0, select bank1
  1683  0313  1281               	bcf	1,5	;volatile
  1684                           
  1685                           ;chrono.c: 378: OPTION_REGbits.PSA = 0;
  1686  0314  1181               	bcf	1,3	;volatile
  1687                           
  1688                           ;chrono.c: 379: OPTION_REGbits.PS = 0b100;
  1689  0315  0801               	movf	1,w	;volatile
  1690  0316  39F8               	andlw	-8
  1691  0317  3804               	iorlw	4
  1692  0318  0081               	movwf	1	;volatile
  1693  0319  0008               	return
  1694  031A                     __end_of_initializeTimer0:	
  1695                           
  1696                           	psect	text10
  1697  02EF                     __ptext10:	
  1698 ;; *************** function _initializeInt *****************
  1699 ;; Defined at:
  1700 ;;		line 359 in file "chrono.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;		None               void
  1707 ;; Registers used:
  1708 ;;		None
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1714 ;;      Params:         0       0       0       0       0
  1715 ;;      Locals:         0       0       0       0       0
  1716 ;;      Temps:          0       0       0       0       0
  1717 ;;      Totals:         0       0       0       0       0
  1718 ;;Total ram usage:        0 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    1
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_startUp
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           
  1729                           ;psect for function _initializeInt
  1730  02EF                     _initializeInt:	
  1731                           
  1732                           ;chrono.c: 360: TMR1IE = 1;
  1733                           
  1734                           ;incstack = 0
  1735                           ; Regs used in _initializeInt: []
  1736  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  1737  02F0  1303               	bcf	3,6	;RP1=0, select bank1
  1738  02F1  140C               	bsf	12,0	;volatile
  1739                           
  1740                           ;chrono.c: 361: TMR0IE = 1;
  1741  02F2  168B               	bsf	11,5	;volatile
  1742                           
  1743                           ;chrono.c: 362: (GIE = 1);
  1744  02F3  178B               	bsf	11,7	;volatile
  1745                           
  1746                           ;chrono.c: 363: INTCONbits.PEIE = 1;
  1747  02F4  170B               	bsf	11,6	;volatile
  1748                           
  1749                           ;chrono.c: 364: PIR1bits.RCIF = 0;
  1750  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  1751  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  1752  02F7  128C               	bcf	12,5	;volatile
  1753                           
  1754                           ;chrono.c: 365: PIE1bits.RCIE = 0;
  1755  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  1756  02F9  1303               	bcf	3,6	;RP1=0, select bank1
  1757  02FA  128C               	bcf	12,5	;volatile
  1758  02FB  0008               	return
  1759  02FC                     __end_of_initializeInt:	
  1760                           
  1761                           	psect	text11
  1762  02FC                     __ptext11:	
  1763 ;; *************** function _isr *****************
  1764 ;; Defined at:
  1765 ;;		line 336 in file "chrono.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;		None               void
  1772 ;; Registers used:
  1773 ;;		None
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1779 ;;      Params:         0       0       0       0       0
  1780 ;;      Locals:         0       0       0       0       0
  1781 ;;      Temps:          4       0       0       0       0
  1782 ;;      Totals:         4       0       0       0       0
  1783 ;;Total ram usage:        4 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		Interrupt level 1
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           
  1793                           ;psect for function _isr
  1794  02FC                     _isr:	
  1795  02FC  0873               	movf	??_isr+3,w
  1796  02FD  00FF               	movwf	127
  1797  02FE  0872               	movf	??_isr+2,w
  1798  02FF  008A               	movwf	10
  1799  0300  0871               	movf	??_isr+1,w
  1800  0301  0084               	movwf	4
  1801  0302  0E70               	swapf	??_isr^(0+-128),w
  1802  0303  0083               	movwf	3
  1803  0304  0EFE               	swapf	126,f
  1804  0305  0E7E               	swapf	126,w
  1805  0306  0009               	retfie
  1806  0307                     __end_of_isr:	
  1807  007E                     btemp	set	126	;btemp
  1808  007E                     wtemp0	set	126
  1809                           
  1810                           	psect	intentry
  1811  0004                     __pintentry:	
  1812                           ;incstack = 0
  1813                           ; Regs used in _isr: []
  1814                           
  1815  0004                     interrupt_function:	
  1816  007E                     saved_w	set	btemp
  1817  0004  00FE               	movwf	btemp
  1818  0005  0E03               	swapf	3,w
  1819  0006  00F0               	movwf	??_isr
  1820  0007  0804               	movf	4,w
  1821  0008  00F1               	movwf	??_isr+1
  1822  0009  080A               	movf	10,w
  1823  000A  00F2               	movwf	??_isr+2
  1824  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1825  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1826  000D  087F               	movf	btemp+1,w
  1827  000E  00F3               	movwf	??_isr+3
  1828  000F  118A  2AFC         	ljmp	_isr


Data Sizes:
    Strings     4
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     16      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ?___awdiv	int  size(1) Largest target is 0

    fLCD_PrintString@String	PTR unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_fLCD_PrintNumber
    _main->_fLCD_PrintString
    _fLCD_PrintString->_fLCD_RawSend
    _fLCD_PrintNumber->_fLCD_RawSend
    _fLCD_PrintNumber->___awdiv
    _fLCD_Start->_fLCD_RawSend
    _fLCD_Clear->_fLCD_RawSend

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_fLCD_PrintNumber
    _fLCD_PrintString->_fLCD_RawSend
    _fLCD_PrintNumber->___awdiv
    _fLCD_Start->_fLCD_Clear
    _fLCD_Clear->_fLCD_RawSend

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2938
                                             13 BANK0      3     3      0
                            _startUp
                         _fLCD_Start
                   _fLCD_PrintNumber
                   _fLCD_PrintString
 ---------------------------------------------------------------------------------
 (1) _fLCD_PrintString                                     4     3      1     573
                                              5 COMMON     1     0      1
                                              4 BANK0      3     3      0
                       _fLCD_RawSend
 ---------------------------------------------------------------------------------
 (1) _fLCD_PrintNumber                                     6     4      2    1609
                                              5 COMMON     1     1      0
                                              8 BANK0      5     3      2
                       _fLCD_RawSend
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     445
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _fLCD_Start                                           2     2      0     756
                                              6 BANK0      2     2      0
                       _fLCD_RawSend
                         _fLCD_Clear
 ---------------------------------------------------------------------------------
 (2) _fLCD_Clear                                           2     2      0     378
                                              4 BANK0      2     2      0
                       _fLCD_RawSend
 ---------------------------------------------------------------------------------
 (2) _fLCD_RawSend                                         5     4      1     378
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _startUp                                              0     0      0       0
                      _initializeInt
                   _initializeTimer0
                   _initializeTimer1
 ---------------------------------------------------------------------------------
 (2) _initializeTimer1                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initializeTimer0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initializeInt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _startUp
     _initializeInt
     _initializeTimer0
     _initializeTimer1
   _fLCD_Start
     _fLCD_RawSend
     _fLCD_Clear
       _fLCD_RawSend
   _fLCD_PrintNumber
     _fLCD_RawSend
     ___awdiv
   _fLCD_PrintString
     _fLCD_RawSend

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       3       2        0.0%
ABS                  0      0      1A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      10       5       20.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1D      12        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Sat Aug 16 00:09:53 2014

                         pc 0002                 __CFG_CP$OFF 0000                ___awdiv@sign 0025  
                        fsr 0004              ??_fLCD_RawSend 0020                         _GIE 005F  
              __CFG_CPD$OFF 0000                         u805 00EC                         u745 0035  
                       u845 01A1                         u765 0072                         u785 00AF  
                       _isr 02FC                         fsr0 0004                __CFG_IESO$ON 0000  
              __CFG_LVP$OFF 0000                        l1300 0055                        l1310 00A4  
                      l1302 0067                        l1250 026D                        l1324 010C  
                      l1316 00CF                        l1308 0092                        l1326 011E  
                      l1318 00E1                        l1338 0295                        l1292 0026  
                      l1470 0210                        l1480 0218                        l1464 0205  
                      l1482 0226                        l1492 0247                        l1496 024F  
                      l1488 023C                        ?_isr 0070                        STR_1 030D  
                      u1025 021B                        u1107 0288                        u1117 0131  
                      u1045 0227                        u1207 01B8                        u1127 0141  
                      u1055 0233                        u1217 01C0                        u1137 0151  
                      u1065 023D                        u1227 01CD                        u1147 0161  
                      u1237 01E5                        u1157 0171                        u1247 01ED  
                      u1167 0181                        u1257 01F5                        u1177 0191  
                      u1097 0261                        u1187 02C1                        u1197 02D1  
              __CFG_WRT$OFF 0000               __CFG_FCMEN$ON 0000                        _main 0256  
                      _time 0078                        btemp 007E               __CFG_BOREN$ON 0000  
                      start 0011               __CFG_MCLRE$ON 0000                       ??_isr 0070  
                     ?_main 0070             __end_of___awdiv 0256               __CFG_WDTE$OFF 0000  
                     _CMCON 009C                       _ANSEL 009B             ___awdiv@divisor 0020  
           ___awdiv@counter 0024                       _PORTA 0005                       _PORTB 0006  
                     _TRISA 0085                       _TRISB 0086              __CFG_CCPMX$RB0 0000  
  __end_of_fLCD_PrintNumber 0129                  _fLCD_Clear 02B6    __end_of_fLCD_PrintString 02B6  
                _fLCD_Start 0129                       _tflag 0076                       pclath 000A  
           __end_of_startUp 02EF                       status 0003                       wtemp0 007E  
           __initialization 0322                __end_of_main 0290                      ??_main 002D  
          ___awdiv@dividend 0022                      _OSCCON 008F                      _TMR0IE 005D  
                    _TMR1IE 0460           ?_initializeTimer0 0070           ?_initializeTimer1 0070  
      __end_of_fLCD_RawSend 01F9          ??_initializeTimer0 0074          ??_initializeTimer1 0074  
            __CFG_PWRTE$OFF 0000                   ??___awdiv 0074            ___awdiv@quotient 0026  
       fLCD_PrintString@idx 0026                      saved_w 007E                 ?_fLCD_Clear 0070  
    __size_of_initializeInt 000D                   ??_startUp 0074                 ?_fLCD_Start 0070  
   __end_of__initialization 0326              __pcstackCOMMON 0070              _OPTION_REGbits 0081  
    fLCD_PrintNumber@Number 0028                  __pmaintext 0256               _initializeInt 02EF  
       __size_of_fLCD_Clear 0021                  __pintentry 0004         __size_of_fLCD_Start 0070  
  fLCD_PrintNumber@tmp_byte 002C           ?_fLCD_PrintNumber 0028       __size_of_fLCD_RawSend 0060  
         ?_fLCD_PrintString 0075                  __stringtab 0307          ??_fLCD_PrintNumber 0075  
        ??_fLCD_PrintString 0024              ?_initializeInt 0070                     ___awdiv 01F9  
                   __ptext1 0290                     __ptext2 0013                     __ptext3 01F9  
                   __ptext4 0129                     __ptext5 02B6                     __ptext6 0199  
                   __ptext7 02D7                     __ptext8 031A                     __ptext9 0311  
              _fLCD_RawSend 0199                   _T1CONbits 0010                __size_of_isr 000B  
                   _startUp 02D7        end_of_initialization 0326   __size_of_initializeTimer0 0009  
 __size_of_initializeTimer1 0008                   _PORTBbits 0006                ??_fLCD_Clear 0024  
              ??_fLCD_Start 0026  fLCD_PrintString@MSZ_String 0075             ??_initializeInt 0074  
        __end_of_fLCD_Clear 02D7          __end_of_fLCD_Start 0199         start_initialization 0322  
               __end_of_isr 0307                 __pbssCOMMON 0076               __pcstackBANK0 0020  
       __end_of__stringdata 0311            fLCD_RawSend@mask 0074   __size_of_fLCD_PrintNumber 0116  
 __size_of_fLCD_PrintString 0026                    ?___awdiv 0020     fLCD_PrintNumber@tmp_int 002A  
          _initializeTimer0 0311            _initializeTimer1 031A                   __pstrings 0307  
                  ?_startUp 0070           interrupt_function 0004                    _PIE1bits 008C  
                  _PIR1bits 000C                 __stringbase 030C                 __stringdata 030D  
    fLCD_PrintString@String 0025            __size_of___awdiv 005D          __end_of__stringtab 030D  
                  __ptext10 02EF                    __ptext11 02FC            __size_of_startUp 0018  
             __size_of_main 003A       __end_of_initializeInt 02FC            _fLCD_PrintNumber 0013  
          _fLCD_PrintString 0290                  _INTCONbits 000B                    intlevel1 0000  
            fLCD_RawSend@in 0022              fLCD_RawSend@pt 0023    __end_of_initializeTimer0 031A  
  __end_of_initializeTimer1 0322                   stringcode 0307               ?_fLCD_RawSend 0074  
                _OPTION_REG 0081                    stringdir 0307                    stringtab 0307  
        __CFG_FOSC$INTOSCIO 0000  
